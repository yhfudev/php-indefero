<?php return array (
  'src/mainboard/lenovo/x60/Kconfig' => 
  array (
    'chunks' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '21',
          1 => '21',
          2 => '	select BOARD_ROMSIZE_KB_2048
',
        ),
        1 => 
        array (
          0 => 22,
          1 => 22,
          2 => '	select CHANNEL_XOR_RANDOMIZATION
',
        ),
        2 => 
        array (
          0 => 23,
          1 => 23,
          2 => '	select HAVE_SMI_HANDLER
',
        ),
        3 => 
        array (
          0 => '',
          1 => 24,
          2 => '	select HAVE_ACPI_TABLES
',
        ),
        4 => 
        array (
          0 => 24,
          1 => 25,
          2 => '
',
        ),
        5 => 
        array (
          0 => 25,
          1 => 26,
          2 => 'config MAINBOARD_DIR
',
        ),
        6 => 
        array (
          0 => 26,
          1 => 27,
          2 => '	string
',
        ),
      ),
    ),
    'chunks_def' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '21',
          1 => '6',
        ),
        1 => 
        array (
          0 => '21',
          1 => '7',
        ),
      ),
    ),
  ),
  'src/mainboard/lenovo/x60/acpi/ac.asl' => 
  array (
    'chunks' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '',
          1 => '1',
          2 => '/*
',
        ),
        1 => 
        array (
          0 => '',
          1 => 2,
          2 => ' * This file is part of the coreboot project.
',
        ),
        2 => 
        array (
          0 => '',
          1 => 3,
          2 => ' *
',
        ),
        3 => 
        array (
          0 => '',
          1 => 4,
          2 => ' * Copyright (c) 2011 Sven Schnelle <svens@stackframe.org>
',
        ),
        4 => 
        array (
          0 => '',
          1 => 5,
          2 => ' *
',
        ),
        5 => 
        array (
          0 => '',
          1 => 6,
          2 => ' * This program is free software; you can redistribute it and/or
',
        ),
        6 => 
        array (
          0 => '',
          1 => 7,
          2 => ' * modify it under the terms of the GNU General Public License as
',
        ),
        7 => 
        array (
          0 => '',
          1 => 8,
          2 => ' * published by the Free Software Foundation; version 2 of
',
        ),
        8 => 
        array (
          0 => '',
          1 => 9,
          2 => ' * the License.
',
        ),
        9 => 
        array (
          0 => '',
          1 => 10,
          2 => ' *
',
        ),
        10 => 
        array (
          0 => '',
          1 => 11,
          2 => ' * This program is distributed in the hope that it will be useful,
',
        ),
        11 => 
        array (
          0 => '',
          1 => 12,
          2 => ' * but WITHOUT ANY WARRANTY; without even the implied warranty of
',
        ),
        12 => 
        array (
          0 => '',
          1 => 13,
          2 => ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
',
        ),
        13 => 
        array (
          0 => '',
          1 => 14,
          2 => ' * GNU General Public License for more details.
',
        ),
        14 => 
        array (
          0 => '',
          1 => 15,
          2 => ' *
',
        ),
        15 => 
        array (
          0 => '',
          1 => 16,
          2 => ' * You should have received a copy of the GNU General Public License
',
        ),
        16 => 
        array (
          0 => '',
          1 => 17,
          2 => ' * along with this program; if not, write to the Free Software
',
        ),
        17 => 
        array (
          0 => '',
          1 => 18,
          2 => ' * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
',
        ),
        18 => 
        array (
          0 => '',
          1 => 19,
          2 => ' * MA 02110-1301 USA
',
        ),
        19 => 
        array (
          0 => '',
          1 => 20,
          2 => ' */
',
        ),
        20 => 
        array (
          0 => '',
          1 => 21,
          2 => '
',
        ),
        21 => 
        array (
          0 => '',
          1 => 22,
          2 => 'Field(ERAM, ByteAcc, NoLock, Preserve)
',
        ),
        22 => 
        array (
          0 => '',
          1 => 23,
          2 => '{
',
        ),
        23 => 
        array (
          0 => '',
          1 => 24,
          2 => '		Offset (0x46),
',
        ),
        24 => 
        array (
          0 => '',
          1 => 25,
          2 => '				, 4,
',
        ),
        25 => 
        array (
          0 => '',
          1 => 26,
          2 => '			    HPAC, 1
',
        ),
        26 => 
        array (
          0 => '',
          1 => 27,
          2 => '}
',
        ),
        27 => 
        array (
          0 => '',
          1 => 28,
          2 => '
',
        ),
        28 => 
        array (
          0 => '',
          1 => 29,
          2 => 'Device(AC)
',
        ),
        29 => 
        array (
          0 => '',
          1 => 30,
          2 => '{
',
        ),
        30 => 
        array (
          0 => '',
          1 => 31,
          2 => '	Name(_HID, "ACPI0003")
',
        ),
        31 => 
        array (
          0 => '',
          1 => 32,
          2 => '	Name(_UID, 0x00)
',
        ),
        32 => 
        array (
          0 => '',
          1 => 33,
          2 => '	Name(_PCL, Package() { \\_SB } )
',
        ),
        33 => 
        array (
          0 => '',
          1 => 34,
          2 => '
',
        ),
        34 => 
        array (
          0 => '',
          1 => 35,
          2 => '	Method(_PSR, 0, NotSerialized)
',
        ),
        35 => 
        array (
          0 => '',
          1 => 36,
          2 => '	{
',
        ),
        36 => 
        array (
          0 => '',
          1 => 37,
          2 => '		return (HPAC)
',
        ),
        37 => 
        array (
          0 => '',
          1 => 38,
          2 => '	}
',
        ),
        38 => 
        array (
          0 => '',
          1 => 39,
          2 => '
',
        ),
        39 => 
        array (
          0 => '',
          1 => 40,
          2 => '	Method(_STA, 0, NotSerialized)
',
        ),
        40 => 
        array (
          0 => '',
          1 => 41,
          2 => '	{
',
        ),
        41 => 
        array (
          0 => '',
          1 => 42,
          2 => '		Return (0x0f)
',
        ),
        42 => 
        array (
          0 => '',
          1 => 43,
          2 => '	}
',
        ),
        43 => 
        array (
          0 => '',
          1 => 44,
          2 => '}
',
        ),
      ),
    ),
    'chunks_def' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '0',
          1 => '0',
        ),
        1 => 
        array (
          0 => '1',
          1 => '44',
        ),
      ),
    ),
  ),
  'src/mainboard/lenovo/x60/acpi/i945_pci_irqs.asl' => 
  array (
    'chunks' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '',
          1 => '1',
          2 => '/*
',
        ),
        1 => 
        array (
          0 => '',
          1 => 2,
          2 => ' * This file is part of the coreboot project.
',
        ),
        2 => 
        array (
          0 => '',
          1 => 3,
          2 => ' *
',
        ),
        3 => 
        array (
          0 => '',
          1 => 4,
          2 => ' * Copyright (C) 2011 Sven Schnelle <svens@stackframe.org>
',
        ),
        4 => 
        array (
          0 => '',
          1 => 5,
          2 => ' *
',
        ),
        5 => 
        array (
          0 => '',
          1 => 6,
          2 => ' * This program is free software; you can redistribute it and/or
',
        ),
        6 => 
        array (
          0 => '',
          1 => 7,
          2 => ' * modify it under the terms of the GNU General Public License as
',
        ),
        7 => 
        array (
          0 => '',
          1 => 8,
          2 => ' * published by the Free Software Foundation; version 2 of
',
        ),
        8 => 
        array (
          0 => '',
          1 => 9,
          2 => ' * the License.
',
        ),
        9 => 
        array (
          0 => '',
          1 => 10,
          2 => ' *
',
        ),
        10 => 
        array (
          0 => '',
          1 => 11,
          2 => ' * This program is distributed in the hope that it will be useful,
',
        ),
        11 => 
        array (
          0 => '',
          1 => 12,
          2 => ' * but WITHOUT ANY WARRANTY; without even the implied warranty of
',
        ),
        12 => 
        array (
          0 => '',
          1 => 13,
          2 => ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
',
        ),
        13 => 
        array (
          0 => '',
          1 => 14,
          2 => ' * GNU General Public License for more details.
',
        ),
        14 => 
        array (
          0 => '',
          1 => 15,
          2 => ' *
',
        ),
        15 => 
        array (
          0 => '',
          1 => 16,
          2 => ' * You should have received a copy of the GNU General Public License
',
        ),
        16 => 
        array (
          0 => '',
          1 => 17,
          2 => ' * along with this program; if not, write to the Free Software
',
        ),
        17 => 
        array (
          0 => '',
          1 => 18,
          2 => ' * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
',
        ),
        18 => 
        array (
          0 => '',
          1 => 19,
          2 => ' * MA 02110-1301 USA
',
        ),
        19 => 
        array (
          0 => '',
          1 => 20,
          2 => ' */
',
        ),
        20 => 
        array (
          0 => '',
          1 => 21,
          2 => '
',
        ),
        21 => 
        array (
          0 => '',
          1 => 22,
          2 => '/* This is board specific information: IRQ routing for the
',
        ),
        22 => 
        array (
          0 => '',
          1 => 23,
          2 => ' * i945
',
        ),
        23 => 
        array (
          0 => '',
          1 => 24,
          2 => ' */
',
        ),
        24 => 
        array (
          0 => '',
          1 => 25,
          2 => '
',
        ),
        25 => 
        array (
          0 => '',
          1 => 26,
          2 => '
',
        ),
        26 => 
        array (
          0 => '',
          1 => 27,
          2 => '// PCI Interrupt Routing
',
        ),
        27 => 
        array (
          0 => '',
          1 => 28,
          2 => 'Method(_PRT)
',
        ),
        28 => 
        array (
          0 => '',
          1 => 29,
          2 => '{
',
        ),
        29 => 
        array (
          0 => '',
          1 => 30,
          2 => '	If (PICM) {
',
        ),
        30 => 
        array (
          0 => '',
          1 => 31,
          2 => '		Return (Package() {
',
        ),
        31 => 
        array (
          0 => '',
          1 => 32,
          2 => '			Package() { 0x0002ffff, 0, 0, 0x10 }, // VGA
',
        ),
        32 => 
        array (
          0 => '',
          1 => 33,
          2 => '			Package() { 0x001bffff, 1, 0, 0x11 }, // Audio
',
        ),
        33 => 
        array (
          0 => '',
          1 => 34,
          2 => '			Package() { 0x001cffff, 0, 0, 0x14 }, // PCI bridge
',
        ),
        34 => 
        array (
          0 => '',
          1 => 35,
          2 => '			Package() { 0x001cffff, 1, 0, 0x15 }, // PCI bridge
',
        ),
        35 => 
        array (
          0 => '',
          1 => 36,
          2 => '			Package() { 0x001cffff, 2, 0, 0x16 }, // PCI bridge
',
        ),
        36 => 
        array (
          0 => '',
          1 => 37,
          2 => '			Package() { 0x001cffff, 3, 0, 0x17 }, // PCI bridge
',
        ),
        37 => 
        array (
          0 => '',
          1 => 38,
          2 => '			Package() { 0x001dffff, 0, 0, 0x10 }, // USB
',
        ),
        38 => 
        array (
          0 => '',
          1 => 39,
          2 => '			Package() { 0x001dffff, 1, 0, 0x11 }, // USB
',
        ),
        39 => 
        array (
          0 => '',
          1 => 40,
          2 => '			Package() { 0x001dffff, 2, 0, 0x12 }, // USB
',
        ),
        40 => 
        array (
          0 => '',
          1 => 41,
          2 => '			Package() { 0x001dffff, 3, 0, 0x13 }, // USB
',
        ),
        41 => 
        array (
          0 => '',
          1 => 42,
          2 => '			Package() { 0x001fffff, 0, 0, 0x17 }, // LPC
',
        ),
        42 => 
        array (
          0 => '',
          1 => 43,
          2 => '			Package() { 0x001fffff, 1, 0, 0x10 }, // IDE
',
        ),
        43 => 
        array (
          0 => '',
          1 => 44,
          2 => '			Package() { 0x001fffff, 2, 0, 0x10 }  // SATA
',
        ),
        44 => 
        array (
          0 => '',
          1 => 45,
          2 => '		})
',
        ),
        45 => 
        array (
          0 => '',
          1 => 46,
          2 => '	} Else {
',
        ),
        46 => 
        array (
          0 => '',
          1 => 47,
          2 => '		Return (Package() {
',
        ),
        47 => 
        array (
          0 => '',
          1 => 48,
          2 => '			Package() { 0x0002ffff, 0, \\_SB.PCI0.LPCB.LNKA, 0 }, // VGA
',
        ),
        48 => 
        array (
          0 => '',
          1 => 49,
          2 => '			Package() { 0x001bffff, 1, \\_SB.PCI0.LPCB.LNKB, 0 }, // Audio
',
        ),
        49 => 
        array (
          0 => '',
          1 => 50,
          2 => '			Package() { 0x001cffff, 0, \\_SB.PCI0.LPCB.LNKE, 0 }, // PCI
',
        ),
        50 => 
        array (
          0 => '',
          1 => 51,
          2 => '			Package() { 0x001cffff, 1, \\_SB.PCI0.LPCB.LNKF, 0 }, // PCI
',
        ),
        51 => 
        array (
          0 => '',
          1 => 52,
          2 => '			Package() { 0x001cffff, 2, \\_SB.PCI0.LPCB.LNKG, 0 }, // PCI
',
        ),
        52 => 
        array (
          0 => '',
          1 => 53,
          2 => '			Package() { 0x001cffff, 3, \\_SB.PCI0.LPCB.LNKH, 0 }, // PCI
',
        ),
        53 => 
        array (
          0 => '',
          1 => 54,
          2 => '			Package() { 0x001dffff, 0, \\_SB.PCI0.LPCB.LNKA, 0 }, // USB
',
        ),
        54 => 
        array (
          0 => '',
          1 => 55,
          2 => '			Package() { 0x001dffff, 1, \\_SB.PCI0.LPCB.LNKB, 0 }, // USB
',
        ),
        55 => 
        array (
          0 => '',
          1 => 56,
          2 => '			Package() { 0x001dffff, 2, \\_SB.PCI0.LPCB.LNKC, 0 }, // USB
',
        ),
        56 => 
        array (
          0 => '',
          1 => 57,
          2 => '			Package() { 0x001dffff, 3, \\_SB.PCI0.LPCB.LNKD, 0 }, // USB
',
        ),
        57 => 
        array (
          0 => '',
          1 => 58,
          2 => '			Package() { 0x001fffff, 0, \\_SB.PCI0.LPCB.LNKH, 0 }, // LPC
',
        ),
        58 => 
        array (
          0 => '',
          1 => 59,
          2 => '			Package() { 0x001fffff, 1, \\_SB.PCI0.LPCB.LNKA, 0 }, // IDE
',
        ),
        59 => 
        array (
          0 => '',
          1 => 60,
          2 => '			Package() { 0x001fffff, 2, \\_SB.PCI0.LPCB.LNKA, 0 }  // SATA
',
        ),
        60 => 
        array (
          0 => '',
          1 => 61,
          2 => '		})
',
        ),
        61 => 
        array (
          0 => '',
          1 => 62,
          2 => '	}
',
        ),
        62 => 
        array (
          0 => '',
          1 => 63,
          2 => '}
',
        ),
      ),
    ),
    'chunks_def' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '0',
          1 => '0',
        ),
        1 => 
        array (
          0 => '1',
          1 => '63',
        ),
      ),
    ),
  ),
  'src/mainboard/lenovo/x60/acpi/ich7_pci_irqs.asl' => 
  array (
    'chunks' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '',
          1 => '1',
          2 => '/*
',
        ),
        1 => 
        array (
          0 => '',
          1 => 2,
          2 => ' * This file is part of the coreboot project.
',
        ),
        2 => 
        array (
          0 => '',
          1 => 3,
          2 => ' *
',
        ),
        3 => 
        array (
          0 => '',
          1 => 4,
          2 => ' * Copyright (C) 2007-2009 coresystems GmbH
',
        ),
        4 => 
        array (
          0 => '',
          1 => 5,
          2 => ' *
',
        ),
        5 => 
        array (
          0 => '',
          1 => 6,
          2 => ' * This program is free software; you can redistribute it and/or
',
        ),
        6 => 
        array (
          0 => '',
          1 => 7,
          2 => ' * modify it under the terms of the GNU General Public License as
',
        ),
        7 => 
        array (
          0 => '',
          1 => 8,
          2 => ' * published by the Free Software Foundation; version 2 of
',
        ),
        8 => 
        array (
          0 => '',
          1 => 9,
          2 => ' * the License.
',
        ),
        9 => 
        array (
          0 => '',
          1 => 10,
          2 => ' *
',
        ),
        10 => 
        array (
          0 => '',
          1 => 11,
          2 => ' * This program is distributed in the hope that it will be useful,
',
        ),
        11 => 
        array (
          0 => '',
          1 => 12,
          2 => ' * but WITHOUT ANY WARRANTY; without even the implied warranty of
',
        ),
        12 => 
        array (
          0 => '',
          1 => 13,
          2 => ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
',
        ),
        13 => 
        array (
          0 => '',
          1 => 14,
          2 => ' * GNU General Public License for more details.
',
        ),
        14 => 
        array (
          0 => '',
          1 => 15,
          2 => ' *
',
        ),
        15 => 
        array (
          0 => '',
          1 => 16,
          2 => ' * You should have received a copy of the GNU General Public License
',
        ),
        16 => 
        array (
          0 => '',
          1 => 17,
          2 => ' * along with this program; if not, write to the Free Software
',
        ),
        17 => 
        array (
          0 => '',
          1 => 18,
          2 => ' * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
',
        ),
        18 => 
        array (
          0 => '',
          1 => 19,
          2 => ' * MA 02110-1301 USA
',
        ),
        19 => 
        array (
          0 => '',
          1 => 20,
          2 => ' */
',
        ),
        20 => 
        array (
          0 => '',
          1 => 21,
          2 => '
',
        ),
        21 => 
        array (
          0 => '',
          1 => 22,
          2 => '/* This is board specific information: IRQ routing for the
',
        ),
        22 => 
        array (
          0 => '',
          1 => 23,
          2 => ' * 0:1e.0 PCI bridge of the ICH7
',
        ),
        23 => 
        array (
          0 => '',
          1 => 24,
          2 => ' */
',
        ),
        24 => 
        array (
          0 => '',
          1 => 25,
          2 => '
',
        ),
        25 => 
        array (
          0 => '',
          1 => 26,
          2 => 'If (PICM) {
',
        ),
        26 => 
        array (
          0 => '',
          1 => 27,
          2 => '	Return (Package() {
',
        ),
        27 => 
        array (
          0 => '',
          1 => 28,
          2 => '		Package (0x04) { 0x0000FFFF, 0x00, 0x00, 0x10 },
',
        ),
        28 => 
        array (
          0 => '',
          1 => 29,
          2 => '		Package (0x04) { 0x0000FFFF, 0x01, 0x00, 0x11 },
',
        ),
        29 => 
        array (
          0 => '',
          1 => 30,
          2 => '		Package (0x04) { 0x0000FFFF, 0x02, 0x00, 0x12 },
',
        ),
        30 => 
        array (
          0 => '',
          1 => 31,
          2 => '		Package (0x04) { 0x0001FFFF, 0x00, 0x00, 0x10 },
',
        ),
        31 => 
        array (
          0 => '',
          1 => 32,
          2 => '		Package (0x04) { 0x0002FFFF, 0x00, 0x00, 0x15 },
',
        ),
        32 => 
        array (
          0 => '',
          1 => 33,
          2 => '		Package (0x04) { 0x0002FFFF, 0x01, 0x00, 0x16 },
',
        ),
        33 => 
        array (
          0 => '',
          1 => 34,
          2 => '		Package (0x04) { 0x0008FFFF, 0x00, 0x00, 0x14 }
',
        ),
        34 => 
        array (
          0 => '',
          1 => 35,
          2 => '	})
',
        ),
        35 => 
        array (
          0 => '',
          1 => 36,
          2 => ' } Else {
',
        ),
        36 => 
        array (
          0 => '',
          1 => 37,
          2 => '	Return (Package() {
',
        ),
        37 => 
        array (
          0 => '',
          1 => 38,
          2 => '		Package (0x04) { 0x0000FFFF, 0x00, \\_SB.PCI0.LPCB.LNKA, 0x00 },
',
        ),
        38 => 
        array (
          0 => '',
          1 => 39,
          2 => '		Package (0x04) { 0x0000FFFF, 0x01, \\_SB.PCI0.LPCB.LNKB, 0x00 },
',
        ),
        39 => 
        array (
          0 => '',
          1 => 40,
          2 => '		Package (0x04) { 0x0000FFFF, 0x02, \\_SB.PCI0.LPCB.LNKC, 0x00 },
',
        ),
        40 => 
        array (
          0 => '',
          1 => 41,
          2 => '		Package (0x04) { 0x0001FFFF, 0x00, \\_SB.PCI0.LPCB.LNKA, 0x00 },
',
        ),
        41 => 
        array (
          0 => '',
          1 => 42,
          2 => '		Package (0x04) { 0x0002FFFF, 0x00, \\_SB.PCI0.LPCB.LNKF, 0x00 },
',
        ),
        42 => 
        array (
          0 => '',
          1 => 43,
          2 => '		Package (0x04) { 0x0002FFFF, 0x01, \\_SB.PCI0.LPCB.LNKG, 0x00 },
',
        ),
        43 => 
        array (
          0 => '',
          1 => 44,
          2 => '		Package (0x04) { 0x0008FFFF, 0x00, \\_SB.PCI0.LPCB.LNKE, 0x00 }
',
        ),
        44 => 
        array (
          0 => '',
          1 => 45,
          2 => '	})
',
        ),
        45 => 
        array (
          0 => '',
          1 => 46,
          2 => '}
',
        ),
      ),
    ),
    'chunks_def' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '0',
          1 => '0',
        ),
        1 => 
        array (
          0 => '1',
          1 => '46',
        ),
      ),
    ),
  ),
  'src/mainboard/lenovo/x60/acpi/platform.asl' => 
  array (
    'chunks' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '',
          1 => '1',
          2 => '/*
',
        ),
        1 => 
        array (
          0 => '',
          1 => 2,
          2 => ' * This file is part of the coreboot project.
',
        ),
        2 => 
        array (
          0 => '',
          1 => 3,
          2 => ' *
',
        ),
        3 => 
        array (
          0 => '',
          1 => 4,
          2 => ' * Copyright (C) 2007-2009 coresystems GmbH
',
        ),
        4 => 
        array (
          0 => '',
          1 => 5,
          2 => ' *
',
        ),
        5 => 
        array (
          0 => '',
          1 => 6,
          2 => ' * This program is free software; you can redistribute it and/or
',
        ),
        6 => 
        array (
          0 => '',
          1 => 7,
          2 => ' * modify it under the terms of the GNU General Public License as
',
        ),
        7 => 
        array (
          0 => '',
          1 => 8,
          2 => ' * published by the Free Software Foundation; version 2 of
',
        ),
        8 => 
        array (
          0 => '',
          1 => 9,
          2 => ' * the License.
',
        ),
        9 => 
        array (
          0 => '',
          1 => 10,
          2 => ' *
',
        ),
        10 => 
        array (
          0 => '',
          1 => 11,
          2 => ' * This program is distributed in the hope that it will be useful,
',
        ),
        11 => 
        array (
          0 => '',
          1 => 12,
          2 => ' * but WITHOUT ANY WARRANTY; without even the implied warranty of
',
        ),
        12 => 
        array (
          0 => '',
          1 => 13,
          2 => ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
',
        ),
        13 => 
        array (
          0 => '',
          1 => 14,
          2 => ' * GNU General Public License for more details.
',
        ),
        14 => 
        array (
          0 => '',
          1 => 15,
          2 => ' *
',
        ),
        15 => 
        array (
          0 => '',
          1 => 16,
          2 => ' * You should have received a copy of the GNU General Public License
',
        ),
        16 => 
        array (
          0 => '',
          1 => 17,
          2 => ' * along with this program; if not, write to the Free Software
',
        ),
        17 => 
        array (
          0 => '',
          1 => 18,
          2 => ' * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
',
        ),
        18 => 
        array (
          0 => '',
          1 => 19,
          2 => ' * MA 02110-1301 USA
',
        ),
        19 => 
        array (
          0 => '',
          1 => 20,
          2 => ' */
',
        ),
        20 => 
        array (
          0 => '',
          1 => 21,
          2 => '
',
        ),
        21 => 
        array (
          0 => '',
          1 => 22,
          2 => '/* These come from the dynamically created CPU SSDT */
',
        ),
        22 => 
        array (
          0 => '',
          1 => 23,
          2 => 'External(PDC0)
',
        ),
        23 => 
        array (
          0 => '',
          1 => 24,
          2 => 'External(PDC1)
',
        ),
        24 => 
        array (
          0 => '',
          1 => 25,
          2 => '
',
        ),
        25 => 
        array (
          0 => '',
          1 => 26,
          2 => '/* The APM port can be used for generating software SMIs */
',
        ),
        26 => 
        array (
          0 => '',
          1 => 27,
          2 => '
',
        ),
        27 => 
        array (
          0 => '',
          1 => 28,
          2 => 'OperationRegion (APMP, SystemIO, 0xb2, 2)
',
        ),
        28 => 
        array (
          0 => '',
          1 => 29,
          2 => 'Field (APMP, ByteAcc, NoLock, Preserve)
',
        ),
        29 => 
        array (
          0 => '',
          1 => 30,
          2 => '{
',
        ),
        30 => 
        array (
          0 => '',
          1 => 31,
          2 => '	APMC, 8,	// APM command
',
        ),
        31 => 
        array (
          0 => '',
          1 => 32,
          2 => '	APMS, 8		// APM status
',
        ),
        32 => 
        array (
          0 => '',
          1 => 33,
          2 => '}
',
        ),
        33 => 
        array (
          0 => '',
          1 => 34,
          2 => '
',
        ),
        34 => 
        array (
          0 => '',
          1 => 35,
          2 => '/* Port 80 POST */
',
        ),
        35 => 
        array (
          0 => '',
          1 => 36,
          2 => '
',
        ),
        36 => 
        array (
          0 => '',
          1 => 37,
          2 => 'OperationRegion (POST, SystemIO, 0x80, 1)
',
        ),
        37 => 
        array (
          0 => '',
          1 => 38,
          2 => 'Field (POST, ByteAcc, Lock, Preserve)
',
        ),
        38 => 
        array (
          0 => '',
          1 => 39,
          2 => '{
',
        ),
        39 => 
        array (
          0 => '',
          1 => 40,
          2 => '	DBG0, 8
',
        ),
        40 => 
        array (
          0 => '',
          1 => 41,
          2 => '}
',
        ),
        41 => 
        array (
          0 => '',
          1 => 42,
          2 => '
',
        ),
        42 => 
        array (
          0 => '',
          1 => 43,
          2 => '/* SMI I/O Trap */
',
        ),
        43 => 
        array (
          0 => '',
          1 => 44,
          2 => 'Method(TRAP, 1, Serialized)
',
        ),
        44 => 
        array (
          0 => '',
          1 => 45,
          2 => '{
',
        ),
        45 => 
        array (
          0 => '',
          1 => 46,
          2 => '	Store (Arg0, SMIF)	// SMI Function
',
        ),
        46 => 
        array (
          0 => '',
          1 => 47,
          2 => '	Store (0, TRP0)		// Generate trap
',
        ),
        47 => 
        array (
          0 => '',
          1 => 48,
          2 => '	Return (SMIF)		// Return value of SMI handler
',
        ),
        48 => 
        array (
          0 => '',
          1 => 49,
          2 => '}
',
        ),
        49 => 
        array (
          0 => '',
          1 => 50,
          2 => '
',
        ),
        50 => 
        array (
          0 => '',
          1 => 51,
          2 => '/* The _PIC method is called by the OS to choose between interrupt
',
        ),
        51 => 
        array (
          0 => '',
          1 => 52,
          2 => ' * routing via the i8259 interrupt controller or the APIC.
',
        ),
        52 => 
        array (
          0 => '',
          1 => 53,
          2 => ' *
',
        ),
        53 => 
        array (
          0 => '',
          1 => 54,
          2 => ' * _PIC is called with a parameter of 0 for i8259 configuration and
',
        ),
        54 => 
        array (
          0 => '',
          1 => 55,
          2 => ' * with a parameter of 1 for Local Apic/IOAPIC configuration.
',
        ),
        55 => 
        array (
          0 => '',
          1 => 56,
          2 => ' */
',
        ),
        56 => 
        array (
          0 => '',
          1 => 57,
          2 => '
',
        ),
        57 => 
        array (
          0 => '',
          1 => 58,
          2 => 'Method(_PIC, 1)
',
        ),
        58 => 
        array (
          0 => '',
          1 => 59,
          2 => '{
',
        ),
        59 => 
        array (
          0 => '',
          1 => 60,
          2 => '	// Remember the OS\' IRQ routing choice.
',
        ),
        60 => 
        array (
          0 => '',
          1 => 61,
          2 => '	Store(Arg0, PICM)
',
        ),
        61 => 
        array (
          0 => '',
          1 => 62,
          2 => '}
',
        ),
        62 => 
        array (
          0 => '',
          1 => 63,
          2 => '
',
        ),
        63 => 
        array (
          0 => '',
          1 => 64,
          2 => '/* The _PTS method (Prepare To Sleep) is called before the OS is
',
        ),
        64 => 
        array (
          0 => '',
          1 => 65,
          2 => ' * entering a sleep state. The sleep state number is passed in Arg0
',
        ),
        65 => 
        array (
          0 => '',
          1 => 66,
          2 => ' */
',
        ),
        66 => 
        array (
          0 => '',
          1 => 67,
          2 => '
',
        ),
        67 => 
        array (
          0 => '',
          1 => 68,
          2 => 'Method(_PTS,1)
',
        ),
        68 => 
        array (
          0 => '',
          1 => 69,
          2 => '{
',
        ),
        69 => 
        array (
          0 => '',
          1 => 70,
          2 => '	// Call a trap so SMI can prepare for Sleep as well.
',
        ),
        70 => 
        array (
          0 => '',
          1 => 71,
          2 => '	// TRAP(0x55)
',
        ),
        71 => 
        array (
          0 => '',
          1 => 72,
          2 => '}
',
        ),
        72 => 
        array (
          0 => '',
          1 => 73,
          2 => '
',
        ),
        73 => 
        array (
          0 => '',
          1 => 74,
          2 => '/* The _WAK method is called on system wakeup */
',
        ),
        74 => 
        array (
          0 => '',
          1 => 75,
          2 => '
',
        ),
        75 => 
        array (
          0 => '',
          1 => 76,
          2 => 'Method(_WAK,1)
',
        ),
        76 => 
        array (
          0 => '',
          1 => 77,
          2 => '{
',
        ),
        77 => 
        array (
          0 => '',
          1 => 78,
          2 => '	// CPU specific part
',
        ),
        78 => 
        array (
          0 => '',
          1 => 79,
          2 => '
',
        ),
        79 => 
        array (
          0 => '',
          1 => 80,
          2 => '	// Notify PCI Express slots in case a card
',
        ),
        80 => 
        array (
          0 => '',
          1 => 81,
          2 => '	// was inserted while a sleep state was active.
',
        ),
        81 => 
        array (
          0 => '',
          1 => 82,
          2 => '
',
        ),
        82 => 
        array (
          0 => '',
          1 => 83,
          2 => '	// Are we going to S3?
',
        ),
        83 => 
        array (
          0 => '',
          1 => 84,
          2 => '	If (LEqual(Arg0, 3)) {
',
        ),
        84 => 
        array (
          0 => '',
          1 => 85,
          2 => '		// ..
',
        ),
        85 => 
        array (
          0 => '',
          1 => 86,
          2 => '	}
',
        ),
        86 => 
        array (
          0 => '',
          1 => 87,
          2 => '
',
        ),
        87 => 
        array (
          0 => '',
          1 => 88,
          2 => '	// Are we going to S4?
',
        ),
        88 => 
        array (
          0 => '',
          1 => 89,
          2 => '	If (LEqual(Arg0, 4)) {
',
        ),
        89 => 
        array (
          0 => '',
          1 => 90,
          2 => '		// ..
',
        ),
        90 => 
        array (
          0 => '',
          1 => 91,
          2 => '	}
',
        ),
        91 => 
        array (
          0 => '',
          1 => 92,
          2 => '
',
        ),
        92 => 
        array (
          0 => '',
          1 => 93,
          2 => '	// TODO: Windows XP SP2 P-State restore
',
        ),
        93 => 
        array (
          0 => '',
          1 => 94,
          2 => '
',
        ),
        94 => 
        array (
          0 => '',
          1 => 95,
          2 => '	Return(Package(){0,0})
',
        ),
        95 => 
        array (
          0 => '',
          1 => 96,
          2 => '}
',
        ),
        96 => 
        array (
          0 => '',
          1 => 97,
          2 => '
',
        ),
        97 => 
        array (
          0 => '',
          1 => 98,
          2 => '// Power notification
',
        ),
        98 => 
        array (
          0 => '',
          1 => 99,
          2 => '
',
        ),
        99 => 
        array (
          0 => '',
          1 => 100,
          2 => 'External (\\_PR_.CPU0, DeviceObj)
',
        ),
        100 => 
        array (
          0 => '',
          1 => 101,
          2 => 'External (\\_PR_.CPU1, DeviceObj)
',
        ),
        101 => 
        array (
          0 => '',
          1 => 102,
          2 => '
',
        ),
        102 => 
        array (
          0 => '',
          1 => 103,
          2 => 'Method (PNOT)
',
        ),
        103 => 
        array (
          0 => '',
          1 => 104,
          2 => '{
',
        ),
        104 => 
        array (
          0 => '',
          1 => 105,
          2 => '	If (MPEN) {
',
        ),
        105 => 
        array (
          0 => '',
          1 => 106,
          2 => '		If(And(PDC0, 0x08)) {
',
        ),
        106 => 
        array (
          0 => '',
          1 => 107,
          2 => '			Notify (\\_PR_.CPU0, 0x80)	 // _PPC
',
        ),
        107 => 
        array (
          0 => '',
          1 => 108,
          2 => '
',
        ),
        108 => 
        array (
          0 => '',
          1 => 109,
          2 => '			If (And(PDC0, 0x10)) {
',
        ),
        109 => 
        array (
          0 => '',
          1 => 110,
          2 => '				Sleep(100)
',
        ),
        110 => 
        array (
          0 => '',
          1 => 111,
          2 => '				Notify(\\_PR_.CPU0, 0x81) // _CST
',
        ),
        111 => 
        array (
          0 => '',
          1 => 112,
          2 => '			}
',
        ),
        112 => 
        array (
          0 => '',
          1 => 113,
          2 => '		}
',
        ),
        113 => 
        array (
          0 => '',
          1 => 114,
          2 => '
',
        ),
        114 => 
        array (
          0 => '',
          1 => 115,
          2 => '		If(And(PDC1, 0x08)) {
',
        ),
        115 => 
        array (
          0 => '',
          1 => 116,
          2 => '			Notify (\\_PR_.CPU1, 0x80)	 // _PPC
',
        ),
        116 => 
        array (
          0 => '',
          1 => 117,
          2 => '			If (And(PDC1, 0x10)) {
',
        ),
        117 => 
        array (
          0 => '',
          1 => 118,
          2 => '				Sleep(100)
',
        ),
        118 => 
        array (
          0 => '',
          1 => 119,
          2 => '				Notify(\\_PR_.CPU1, 0x81) // _CST
',
        ),
        119 => 
        array (
          0 => '',
          1 => 120,
          2 => '			}
',
        ),
        120 => 
        array (
          0 => '',
          1 => 121,
          2 => '		}
',
        ),
        121 => 
        array (
          0 => '',
          1 => 122,
          2 => '
',
        ),
        122 => 
        array (
          0 => '',
          1 => 123,
          2 => '	} Else { // UP
',
        ),
        123 => 
        array (
          0 => '',
          1 => 124,
          2 => '		Notify (\\_PR_.CPU0, 0x80)
',
        ),
        124 => 
        array (
          0 => '',
          1 => 125,
          2 => '		Sleep(0x64)
',
        ),
        125 => 
        array (
          0 => '',
          1 => 126,
          2 => '		Notify(\\_PR_.CPU0, 0x81)
',
        ),
        126 => 
        array (
          0 => '',
          1 => 127,
          2 => '	}
',
        ),
        127 => 
        array (
          0 => '',
          1 => 128,
          2 => '
',
        ),
        128 => 
        array (
          0 => '',
          1 => 129,
          2 => '	// Notify the Batteries
',
        ),
        129 => 
        array (
          0 => '',
          1 => 130,
          2 => '	Notify(\\_SB.PCI0.LPCB.EC.BAT0, 0x80) // Execute BAT1 _BST
',
        ),
        130 => 
        array (
          0 => '',
          1 => 131,
          2 => '	Notify(\\_SB.PCI0.LPCB.EC.BAT1, 0x80) // Execute BAT2 _BST
',
        ),
        131 => 
        array (
          0 => '',
          1 => 132,
          2 => '}
',
        ),
        132 => 
        array (
          0 => '',
          1 => 133,
          2 => '
',
        ),
        133 => 
        array (
          0 => '',
          1 => 134,
          2 => '/* System Bus */
',
        ),
        134 => 
        array (
          0 => '',
          1 => 135,
          2 => '
',
        ),
        135 => 
        array (
          0 => '',
          1 => 136,
          2 => 'Scope(\\_SB)
',
        ),
        136 => 
        array (
          0 => '',
          1 => 137,
          2 => '{
',
        ),
        137 => 
        array (
          0 => '',
          1 => 138,
          2 => '	/* This method is placed on the top level, so we can make sure it\'s the
',
        ),
        138 => 
        array (
          0 => '',
          1 => 139,
          2 => '	 * first executed _INI method.
',
        ),
        139 => 
        array (
          0 => '',
          1 => 140,
          2 => '	 */
',
        ),
        140 => 
        array (
          0 => '',
          1 => 141,
          2 => '	Method(_INI, 0)
',
        ),
        141 => 
        array (
          0 => '',
          1 => 142,
          2 => '	{
',
        ),
        142 => 
        array (
          0 => '',
          1 => 143,
          2 => '		/* The DTS data in NVS is probably not up to date.
',
        ),
        143 => 
        array (
          0 => '',
          1 => 144,
          2 => '		 * Update temperature values and make sure AP thermal
',
        ),
        144 => 
        array (
          0 => '',
          1 => 145,
          2 => '		 * interrupts can happen
',
        ),
        145 => 
        array (
          0 => '',
          1 => 146,
          2 => '		 */
',
        ),
        146 => 
        array (
          0 => '',
          1 => 147,
          2 => '
',
        ),
        147 => 
        array (
          0 => '',
          1 => 148,
          2 => '		// TRAP(71) // TODO
',
        ),
        148 => 
        array (
          0 => '',
          1 => 149,
          2 => '
',
        ),
        149 => 
        array (
          0 => '',
          1 => 150,
          2 => '		/* Determine the Operating System and save the value in OSYS.
',
        ),
        150 => 
        array (
          0 => '',
          1 => 151,
          2 => '		 * We have to do this in order to be able to work around
',
        ),
        151 => 
        array (
          0 => '',
          1 => 152,
          2 => '		 * certain windows bugs.
',
        ),
        152 => 
        array (
          0 => '',
          1 => 153,
          2 => '		 *
',
        ),
        153 => 
        array (
          0 => '',
          1 => 154,
          2 => '		 *    OSYS value | Operating System
',
        ),
        154 => 
        array (
          0 => '',
          1 => 155,
          2 => '		 *    -----------+------------------
',
        ),
        155 => 
        array (
          0 => '',
          1 => 156,
          2 => '		 *       2000    | Windows 2000
',
        ),
        156 => 
        array (
          0 => '',
          1 => 157,
          2 => '		 *       2001    | Windows XP(+SP1)
',
        ),
        157 => 
        array (
          0 => '',
          1 => 158,
          2 => '		 *       2002    | Windows XP SP2
',
        ),
        158 => 
        array (
          0 => '',
          1 => 159,
          2 => '		 *       2006    | Windows Vista
',
        ),
        159 => 
        array (
          0 => '',
          1 => 160,
          2 => '		 *       ????    | Windows 7
',
        ),
        160 => 
        array (
          0 => '',
          1 => 161,
          2 => '		 */
',
        ),
        161 => 
        array (
          0 => '',
          1 => 162,
          2 => '
',
        ),
        162 => 
        array (
          0 => '',
          1 => 163,
          2 => '		/* Let\'s assume we\'re running at least Windows 2000 */
',
        ),
        163 => 
        array (
          0 => '',
          1 => 164,
          2 => '		Store (2000, OSYS)
',
        ),
        164 => 
        array (
          0 => '',
          1 => 165,
          2 => '
',
        ),
        165 => 
        array (
          0 => '',
          1 => 166,
          2 => '		If (CondRefOf(_OSI, Local0)) {
',
        ),
        166 => 
        array (
          0 => '',
          1 => 167,
          2 => '			/* Linux answers _OSI with "True" for a couple of
',
        ),
        167 => 
        array (
          0 => '',
          1 => 168,
          2 => '			 * Windows version queries. But unlike Windows it
',
        ),
        168 => 
        array (
          0 => '',
          1 => 169,
          2 => '			 * needs a Video repost, so let\'s determine whether
',
        ),
        169 => 
        array (
          0 => '',
          1 => 170,
          2 => '			 * we\'re running Linux.
',
        ),
        170 => 
        array (
          0 => '',
          1 => 171,
          2 => '			 */
',
        ),
        171 => 
        array (
          0 => '',
          1 => 172,
          2 => '
',
        ),
        172 => 
        array (
          0 => '',
          1 => 173,
          2 => '			If (_OSI("Linux")) {
',
        ),
        173 => 
        array (
          0 => '',
          1 => 174,
          2 => '				Store (1, LINX)
',
        ),
        174 => 
        array (
          0 => '',
          1 => 175,
          2 => '			}
',
        ),
        175 => 
        array (
          0 => '',
          1 => 176,
          2 => '
',
        ),
        176 => 
        array (
          0 => '',
          1 => 177,
          2 => '			If (_OSI("Windows 2001")) {
',
        ),
        177 => 
        array (
          0 => '',
          1 => 178,
          2 => '				Store (2001, OSYS)
',
        ),
        178 => 
        array (
          0 => '',
          1 => 179,
          2 => '			}
',
        ),
        179 => 
        array (
          0 => '',
          1 => 180,
          2 => '
',
        ),
        180 => 
        array (
          0 => '',
          1 => 181,
          2 => '			If (_OSI("Windows 2001 SP1")) {
',
        ),
        181 => 
        array (
          0 => '',
          1 => 182,
          2 => '				Store (2001, OSYS)
',
        ),
        182 => 
        array (
          0 => '',
          1 => 183,
          2 => '			}
',
        ),
        183 => 
        array (
          0 => '',
          1 => 184,
          2 => '
',
        ),
        184 => 
        array (
          0 => '',
          1 => 185,
          2 => '			If (_OSI("Windows 2001 SP2")) {
',
        ),
        185 => 
        array (
          0 => '',
          1 => 186,
          2 => '				Store (2002, OSYS)
',
        ),
        186 => 
        array (
          0 => '',
          1 => 187,
          2 => '			}
',
        ),
        187 => 
        array (
          0 => '',
          1 => 188,
          2 => '
',
        ),
        188 => 
        array (
          0 => '',
          1 => 189,
          2 => '			If (_OSI("Windows 2006")) {
',
        ),
        189 => 
        array (
          0 => '',
          1 => 190,
          2 => '				Store (2006, OSYS)
',
        ),
        190 => 
        array (
          0 => '',
          1 => 191,
          2 => '			}
',
        ),
        191 => 
        array (
          0 => '',
          1 => 192,
          2 => '		}
',
        ),
        192 => 
        array (
          0 => '',
          1 => 193,
          2 => '
',
        ),
        193 => 
        array (
          0 => '',
          1 => 194,
          2 => '		/* And the OS workarounds start right after we know what we\'re
',
        ),
        194 => 
        array (
          0 => '',
          1 => 195,
          2 => '		 * running: Windows XP SP1 needs to have C-State coordination
',
        ),
        195 => 
        array (
          0 => '',
          1 => 196,
          2 => '		 * enabled in SMM.
',
        ),
        196 => 
        array (
          0 => '',
          1 => 197,
          2 => '		 */
',
        ),
        197 => 
        array (
          0 => '',
          1 => 198,
          2 => '		If (LAnd(LEqual(OSYS, 2001), MPEN)) {
',
        ),
        198 => 
        array (
          0 => '',
          1 => 199,
          2 => '			// TRAP(61) // TODO
',
        ),
        199 => 
        array (
          0 => '',
          1 => 200,
          2 => '		}
',
        ),
        200 => 
        array (
          0 => '',
          1 => 201,
          2 => '
',
        ),
        201 => 
        array (
          0 => '',
          1 => 202,
          2 => '		/* SMM power state and C4-on-C3 settings need to be updated */
',
        ),
        202 => 
        array (
          0 => '',
          1 => 203,
          2 => '		// TRAP(43) // TODO
',
        ),
        203 => 
        array (
          0 => '',
          1 => 204,
          2 => '	}
',
        ),
        204 => 
        array (
          0 => '',
          1 => 205,
          2 => '}
',
        ),
        205 => 
        array (
          0 => '',
          1 => 206,
          2 => '
',
        ),
      ),
    ),
    'chunks_def' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '0',
          1 => '0',
        ),
        1 => 
        array (
          0 => '1',
          1 => '206',
        ),
      ),
    ),
  ),
  'src/mainboard/lenovo/x60/acpi/sleepbutton.asl' => 
  array (
    'chunks' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '',
          1 => '1',
          2 => '/*
',
        ),
        1 => 
        array (
          0 => '',
          1 => 2,
          2 => ' * This file is part of the coreboot project.
',
        ),
        2 => 
        array (
          0 => '',
          1 => 3,
          2 => ' *
',
        ),
        3 => 
        array (
          0 => '',
          1 => 4,
          2 => ' * Copyright (c) 2011 Sven Schnelle <svens@stackframe.org>
',
        ),
        4 => 
        array (
          0 => '',
          1 => 5,
          2 => ' *
',
        ),
        5 => 
        array (
          0 => '',
          1 => 6,
          2 => ' * This program is free software; you can redistribute it and/or
',
        ),
        6 => 
        array (
          0 => '',
          1 => 7,
          2 => ' * modify it under the terms of the GNU General Public License as
',
        ),
        7 => 
        array (
          0 => '',
          1 => 8,
          2 => ' * published by the Free Software Foundation; version 2 of
',
        ),
        8 => 
        array (
          0 => '',
          1 => 9,
          2 => ' * the License.
',
        ),
        9 => 
        array (
          0 => '',
          1 => 10,
          2 => ' *
',
        ),
        10 => 
        array (
          0 => '',
          1 => 11,
          2 => ' * This program is distributed in the hope that it will be useful,
',
        ),
        11 => 
        array (
          0 => '',
          1 => 12,
          2 => ' * but WITHOUT ANY WARRANTY; without even the implied warranty of
',
        ),
        12 => 
        array (
          0 => '',
          1 => 13,
          2 => ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
',
        ),
        13 => 
        array (
          0 => '',
          1 => 14,
          2 => ' * GNU General Public License for more details.
',
        ),
        14 => 
        array (
          0 => '',
          1 => 15,
          2 => ' *
',
        ),
        15 => 
        array (
          0 => '',
          1 => 16,
          2 => ' * You should have received a copy of the GNU General Public License
',
        ),
        16 => 
        array (
          0 => '',
          1 => 17,
          2 => ' * along with this program; if not, write to the Free Software
',
        ),
        17 => 
        array (
          0 => '',
          1 => 18,
          2 => ' * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
',
        ),
        18 => 
        array (
          0 => '',
          1 => 19,
          2 => ' * MA 02110-1301 USA
',
        ),
        19 => 
        array (
          0 => '',
          1 => 20,
          2 => ' */
',
        ),
        20 => 
        array (
          0 => '',
          1 => 21,
          2 => '
',
        ),
        21 => 
        array (
          0 => '',
          1 => 22,
          2 => 'Device(SLPB)
',
        ),
        22 => 
        array (
          0 => '',
          1 => 23,
          2 => '{
',
        ),
        23 => 
        array (
          0 => '',
          1 => 24,
          2 => '        Name (_HID, EisaId ("PNP0C0E"))
',
        ),
        24 => 
        array (
          0 => '',
          1 => 25,
          2 => '}
',
        ),
      ),
    ),
    'chunks_def' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '0',
          1 => '0',
        ),
        1 => 
        array (
          0 => '1',
          1 => '25',
        ),
      ),
    ),
  ),
  'src/mainboard/lenovo/x60/acpi/video.asl' => 
  array (
    'chunks' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '',
          1 => '1',
          2 => '/*
',
        ),
        1 => 
        array (
          0 => '',
          1 => 2,
          2 => ' * This file is part of the coreboot project.
',
        ),
        2 => 
        array (
          0 => '',
          1 => 3,
          2 => ' *
',
        ),
        3 => 
        array (
          0 => '',
          1 => 4,
          2 => ' * Copyright (c) 2011 Sven Schnelle <svens@stackframe.org>
',
        ),
        4 => 
        array (
          0 => '',
          1 => 5,
          2 => ' *
',
        ),
        5 => 
        array (
          0 => '',
          1 => 6,
          2 => ' * This program is free software; you can redistribute it and/or
',
        ),
        6 => 
        array (
          0 => '',
          1 => 7,
          2 => ' * modify it under the terms of the GNU General Public License as
',
        ),
        7 => 
        array (
          0 => '',
          1 => 8,
          2 => ' * published by the Free Software Foundation; version 2 of
',
        ),
        8 => 
        array (
          0 => '',
          1 => 9,
          2 => ' * the License.
',
        ),
        9 => 
        array (
          0 => '',
          1 => 10,
          2 => ' *
',
        ),
        10 => 
        array (
          0 => '',
          1 => 11,
          2 => ' * This program is distributed in the hope that it will be useful,
',
        ),
        11 => 
        array (
          0 => '',
          1 => 12,
          2 => ' * but WITHOUT ANY WARRANTY; without even the implied warranty of
',
        ),
        12 => 
        array (
          0 => '',
          1 => 13,
          2 => ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
',
        ),
        13 => 
        array (
          0 => '',
          1 => 14,
          2 => ' * GNU General Public License for more details.
',
        ),
        14 => 
        array (
          0 => '',
          1 => 15,
          2 => ' *
',
        ),
        15 => 
        array (
          0 => '',
          1 => 16,
          2 => ' * You should have received a copy of the GNU General Public License
',
        ),
        16 => 
        array (
          0 => '',
          1 => 17,
          2 => ' * along with this program; if not, write to the Free Software
',
        ),
        17 => 
        array (
          0 => '',
          1 => 18,
          2 => ' * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
',
        ),
        18 => 
        array (
          0 => '',
          1 => 19,
          2 => ' * MA 02110-1301 USA
',
        ),
        19 => 
        array (
          0 => '',
          1 => 20,
          2 => ' */
',
        ),
        20 => 
        array (
          0 => '',
          1 => 21,
          2 => '
',
        ),
        21 => 
        array (
          0 => '',
          1 => 22,
          2 => 'Device (DSPC)
',
        ),
        22 => 
        array (
          0 => '',
          1 => 23,
          2 => '{
',
        ),
        23 => 
        array (
          0 => '',
          1 => 24,
          2 => '	Name (_ADR, 0x00020001)
',
        ),
        24 => 
        array (
          0 => '',
          1 => 25,
          2 => '	OperationRegion (DSPC, PCI_Config, 0x00, 0x100)
',
        ),
        25 => 
        array (
          0 => '',
          1 => 26,
          2 => '	Field (DSPC, ByteAcc, NoLock, Preserve)
',
        ),
        26 => 
        array (
          0 => '',
          1 => 27,
          2 => '	{
',
        ),
        27 => 
        array (
          0 => '',
          1 => 28,
          2 => '		Offset (0xf4),
',
        ),
        28 => 
        array (
          0 => '',
          1 => 29,
          2 => '		       BRTC, 8
',
        ),
        29 => 
        array (
          0 => '',
          1 => 30,
          2 => '	}
',
        ),
        30 => 
        array (
          0 => '',
          1 => 31,
          2 => '
',
        ),
        31 => 
        array (
          0 => '',
          1 => 32,
          2 => '	Method(BRTD, 0, NotSerialized)
',
        ),
        32 => 
        array (
          0 => '',
          1 => 33,
          2 => '	{
',
        ),
        33 => 
        array (
          0 => '',
          1 => 34,
          2 => '		Store(BRTC, Local0)
',
        ),
        34 => 
        array (
          0 => '',
          1 => 35,
          2 => '		if (LGreater (Local0, 15))
',
        ),
        35 => 
        array (
          0 => '',
          1 => 36,
          2 => '		{
',
        ),
        36 => 
        array (
          0 => '',
          1 => 37,
          2 => '			Subtract(Local0, 16, Local0)
',
        ),
        37 => 
        array (
          0 => '',
          1 => 38,
          2 => '			Store(Local0, BRTC)
',
        ),
        38 => 
        array (
          0 => '',
          1 => 39,
          2 => '		}
',
        ),
        39 => 
        array (
          0 => '',
          1 => 40,
          2 => '	}
',
        ),
        40 => 
        array (
          0 => '',
          1 => 41,
          2 => '
',
        ),
        41 => 
        array (
          0 => '',
          1 => 42,
          2 => '	Method(BRTU, 0, NotSerialized)
',
        ),
        42 => 
        array (
          0 => '',
          1 => 43,
          2 => '	{
',
        ),
        43 => 
        array (
          0 => '',
          1 => 44,
          2 => '		Store (BRTC, Local0)
',
        ),
        44 => 
        array (
          0 => '',
          1 => 45,
          2 => '		if (LLess(Local0, 0xff))
',
        ),
        45 => 
        array (
          0 => '',
          1 => 46,
          2 => '		{
',
        ),
        46 => 
        array (
          0 => '',
          1 => 47,
          2 => '			Add (Local0, 16, Local0)
',
        ),
        47 => 
        array (
          0 => '',
          1 => 48,
          2 => '			Store(Local0, BRTC)
',
        ),
        48 => 
        array (
          0 => '',
          1 => 49,
          2 => '		}
',
        ),
        49 => 
        array (
          0 => '',
          1 => 50,
          2 => '	}
',
        ),
        50 => 
        array (
          0 => '',
          1 => 51,
          2 => '}
',
        ),
      ),
    ),
    'chunks_def' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '0',
          1 => '0',
        ),
        1 => 
        array (
          0 => '1',
          1 => '51',
        ),
      ),
    ),
  ),
  'src/mainboard/lenovo/x60/acpi/ec.asl' => 
  array (
    'chunks' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '',
          1 => '1',
          2 => '/*
',
        ),
        1 => 
        array (
          0 => '',
          1 => 2,
          2 => ' * This file is part of the coreboot project.
',
        ),
        2 => 
        array (
          0 => '',
          1 => 3,
          2 => ' *
',
        ),
        3 => 
        array (
          0 => '',
          1 => 4,
          2 => ' * Copyright (c) 2011 Sven Schnelle <svens@stackframe.org>
',
        ),
        4 => 
        array (
          0 => '',
          1 => 5,
          2 => ' *
',
        ),
        5 => 
        array (
          0 => '',
          1 => 6,
          2 => ' * This program is free software; you can redistribute it and/or
',
        ),
        6 => 
        array (
          0 => '',
          1 => 7,
          2 => ' * modify it under the terms of the GNU General Public License as
',
        ),
        7 => 
        array (
          0 => '',
          1 => 8,
          2 => ' * published by the Free Software Foundation; version 2 of
',
        ),
        8 => 
        array (
          0 => '',
          1 => 9,
          2 => ' * the License.
',
        ),
        9 => 
        array (
          0 => '',
          1 => 10,
          2 => ' *
',
        ),
        10 => 
        array (
          0 => '',
          1 => 11,
          2 => ' * This program is distributed in the hope that it will be useful,
',
        ),
        11 => 
        array (
          0 => '',
          1 => 12,
          2 => ' * but WITHOUT ANY WARRANTY; without even the implied warranty of
',
        ),
        12 => 
        array (
          0 => '',
          1 => 13,
          2 => ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
',
        ),
        13 => 
        array (
          0 => '',
          1 => 14,
          2 => ' * GNU General Public License for more details.
',
        ),
        14 => 
        array (
          0 => '',
          1 => 15,
          2 => ' *
',
        ),
        15 => 
        array (
          0 => '',
          1 => 16,
          2 => ' * You should have received a copy of the GNU General Public License
',
        ),
        16 => 
        array (
          0 => '',
          1 => 17,
          2 => ' * along with this program; if not, write to the Free Software
',
        ),
        17 => 
        array (
          0 => '',
          1 => 18,
          2 => ' * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
',
        ),
        18 => 
        array (
          0 => '',
          1 => 19,
          2 => ' * MA 02110-1301 USA
',
        ),
        19 => 
        array (
          0 => '',
          1 => 20,
          2 => ' */
',
        ),
        20 => 
        array (
          0 => '',
          1 => 21,
          2 => '
',
        ),
        21 => 
        array (
          0 => '',
          1 => 22,
          2 => 'Device(EC)
',
        ),
        22 => 
        array (
          0 => '',
          1 => 23,
          2 => '{
',
        ),
        23 => 
        array (
          0 => '',
          1 => 24,
          2 => '	Name (_HID, EISAID("PNP0C09"))
',
        ),
        24 => 
        array (
          0 => '',
          1 => 25,
          2 => '	Name (_UID, 0)
',
        ),
        25 => 
        array (
          0 => '',
          1 => 26,
          2 => '
',
        ),
        26 => 
        array (
          0 => '',
          1 => 27,
          2 => '	Name (_GPE, 28)
',
        ),
        27 => 
        array (
          0 => '',
          1 => 28,
          2 => '	Mutex (ECLK, 0)
',
        ),
        28 => 
        array (
          0 => '',
          1 => 29,
          2 => '
',
        ),
        29 => 
        array (
          0 => '',
          1 => 30,
          2 => '	OperationRegion(ERAM, EmbeddedControl, 0x00, 0x100)
',
        ),
        30 => 
        array (
          0 => '',
          1 => 31,
          2 => '	Field (ERAM, ByteAcc, NoLock, Preserve)
',
        ),
        31 => 
        array (
          0 => '',
          1 => 32,
          2 => '	{
',
        ),
        32 => 
        array (
          0 => '',
          1 => 33,
          2 => '		Offset (0x05),
',
        ),
        33 => 
        array (
          0 => '',
          1 => 34,
          2 => '				HSPA, 1,
',
        ),
        34 => 
        array (
          0 => '',
          1 => 35,
          2 => '		Offset (0x0C),
',
        ),
        35 => 
        array (
          0 => '',
          1 => 36,
          2 => '				LEDS, 8,	/* LED state */
',
        ),
        36 => 
        array (
          0 => '',
          1 => 37,
          2 => '		Offset (0x3B),
',
        ),
        37 => 
        array (
          0 => '',
          1 => 38,
          2 => '				    , 1,
',
        ),
        38 => 
        array (
          0 => '',
          1 => 39,
          2 => '				KBLT, 1,         /* Keyboard Light */
',
        ),
        39 => 
        array (
          0 => '',
          1 => 40,
          2 => '		Offset (0x81),
',
        ),
        40 => 
        array (
          0 => '',
          1 => 41,
          2 => '				PAGE, 8		/* Information Page Selector */
',
        ),
        41 => 
        array (
          0 => '',
          1 => 42,
          2 => '        }
',
        ),
        42 => 
        array (
          0 => '',
          1 => 43,
          2 => '
',
        ),
        43 => 
        array (
          0 => '',
          1 => 44,
          2 => '	Method (_CRS, 0)
',
        ),
        44 => 
        array (
          0 => '',
          1 => 45,
          2 => '	{
',
        ),
        45 => 
        array (
          0 => '',
          1 => 46,
          2 => '		Name (ECMD, ResourceTemplate()
',
        ),
        46 => 
        array (
          0 => '',
          1 => 47,
          2 => '		{
',
        ),
        47 => 
        array (
          0 => '',
          1 => 48,
          2 => '			IO (Decode16, 0x62, 0x62, 1, 1)
',
        ),
        48 => 
        array (
          0 => '',
          1 => 49,
          2 => '		   	IO (Decode16, 0x66, 0x66, 1, 1)
',
        ),
        49 => 
        array (
          0 => '',
          1 => 50,
          2 => '		})
',
        ),
        50 => 
        array (
          0 => '',
          1 => 51,
          2 => '		Return (ECMD)
',
        ),
        51 => 
        array (
          0 => '',
          1 => 52,
          2 => '	}
',
        ),
        52 => 
        array (
          0 => '',
          1 => 53,
          2 => '
',
        ),
        53 => 
        array (
          0 => '',
          1 => 54,
          2 => '	Method (LED, 1, NotSerialized)
',
        ),
        54 => 
        array (
          0 => '',
          1 => 55,
          2 => '	{
',
        ),
        55 => 
        array (
          0 => '',
          1 => 56,
          2 => '		Store(Arg0, LEDS)
',
        ),
        56 => 
        array (
          0 => '',
          1 => 57,
          2 => '	}
',
        ),
        57 => 
        array (
          0 => '',
          1 => 58,
          2 => '
',
        ),
        58 => 
        array (
          0 => '',
          1 => 59,
          2 => '	Method (_INI, 0, NotSerialized)
',
        ),
        59 => 
        array (
          0 => '',
          1 => 60,
          2 => '	{
',
        ),
        60 => 
        array (
          0 => '',
          1 => 61,
          2 => '	}
',
        ),
        61 => 
        array (
          0 => '',
          1 => 62,
          2 => '
',
        ),
        62 => 
        array (
          0 => '',
          1 => 63,
          2 => '	/* Sleep Button pressed */
',
        ),
        63 => 
        array (
          0 => '',
          1 => 64,
          2 => '	Method(_Q13, 0, NotSerialized)
',
        ),
        64 => 
        array (
          0 => '',
          1 => 65,
          2 => '	{
',
        ),
        65 => 
        array (
          0 => '',
          1 => 66,
          2 => '		Notify(\\_SB.PCI0.LPCB.EC.SLPB, 0x80)
',
        ),
        66 => 
        array (
          0 => '',
          1 => 67,
          2 => '	}
',
        ),
        67 => 
        array (
          0 => '',
          1 => 68,
          2 => '
',
        ),
        68 => 
        array (
          0 => '',
          1 => 69,
          2 => '	/* Brightness up GPE */
',
        ),
        69 => 
        array (
          0 => '',
          1 => 70,
          2 => '	Method(_Q14, 0, NotSerialized)
',
        ),
        70 => 
        array (
          0 => '',
          1 => 71,
          2 => '	{
',
        ),
        71 => 
        array (
          0 => '',
          1 => 72,
          2 => '		\\DSPC.BRTU ()
',
        ),
        72 => 
        array (
          0 => '',
          1 => 73,
          2 => '	}
',
        ),
        73 => 
        array (
          0 => '',
          1 => 74,
          2 => '
',
        ),
        74 => 
        array (
          0 => '',
          1 => 75,
          2 => '	/* Brightness down GPE */
',
        ),
        75 => 
        array (
          0 => '',
          1 => 76,
          2 => '	Method(_Q15, 0, NotSerialized)
',
        ),
        76 => 
        array (
          0 => '',
          1 => 77,
          2 => '	{
',
        ),
        77 => 
        array (
          0 => '',
          1 => 78,
          2 => '		\\DSPC.BRTD()
',
        ),
        78 => 
        array (
          0 => '',
          1 => 79,
          2 => '	}
',
        ),
        79 => 
        array (
          0 => '',
          1 => 80,
          2 => '
',
        ),
        80 => 
        array (
          0 => '',
          1 => 81,
          2 => '	/* AC status change: present */
',
        ),
        81 => 
        array (
          0 => '',
          1 => 82,
          2 => '	Method(_Q26, 0, NotSerialized)
',
        ),
        82 => 
        array (
          0 => '',
          1 => 83,
          2 => '	{
',
        ),
        83 => 
        array (
          0 => '',
          1 => 84,
          2 => '		Notify (AC, 0x80)
',
        ),
        84 => 
        array (
          0 => '',
          1 => 85,
          2 => '		Beep(6)
',
        ),
        85 => 
        array (
          0 => '',
          1 => 86,
          2 => '	}
',
        ),
        86 => 
        array (
          0 => '',
          1 => 87,
          2 => '
',
        ),
        87 => 
        array (
          0 => '',
          1 => 88,
          2 => '	/* AC status change: not present */
',
        ),
        88 => 
        array (
          0 => '',
          1 => 89,
          2 => '	Method(_Q27, 0, NotSerialized)
',
        ),
        89 => 
        array (
          0 => '',
          1 => 90,
          2 => '	{
',
        ),
        90 => 
        array (
          0 => '',
          1 => 91,
          2 => '		Notify (AC, 0x80)
',
        ),
        91 => 
        array (
          0 => '',
          1 => 92,
          2 => '		Beep(6)
',
        ),
        92 => 
        array (
          0 => '',
          1 => 93,
          2 => '	}
',
        ),
        93 => 
        array (
          0 => '',
          1 => 94,
          2 => '
',
        ),
        94 => 
        array (
          0 => '',
          1 => 95,
          2 => '
',
        ),
        95 => 
        array (
          0 => '',
          1 => 96,
          2 => '#include "ac.asl"
',
        ),
        96 => 
        array (
          0 => '',
          1 => 97,
          2 => '#include "battery.asl"
',
        ),
        97 => 
        array (
          0 => '',
          1 => 98,
          2 => '#include "sleepbutton.asl"
',
        ),
        98 => 
        array (
          0 => '',
          1 => 99,
          2 => '#include "lid.asl"
',
        ),
        99 => 
        array (
          0 => '',
          1 => 100,
          2 => '#include "beep.asl"
',
        ),
        100 => 
        array (
          0 => '',
          1 => 101,
          2 => '}
',
        ),
      ),
    ),
    'chunks_def' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '0',
          1 => '0',
        ),
        1 => 
        array (
          0 => '1',
          1 => '101',
        ),
      ),
    ),
  ),
  'src/mainboard/lenovo/x60/acpi/lid.asl' => 
  array (
    'chunks' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '',
          1 => '1',
          2 => '/*
',
        ),
        1 => 
        array (
          0 => '',
          1 => 2,
          2 => ' * This file is part of the coreboot project.
',
        ),
        2 => 
        array (
          0 => '',
          1 => 3,
          2 => ' *
',
        ),
        3 => 
        array (
          0 => '',
          1 => 4,
          2 => ' * Copyright (c) 2011 Sven Schnelle <svens@stackframe.org>
',
        ),
        4 => 
        array (
          0 => '',
          1 => 5,
          2 => ' *
',
        ),
        5 => 
        array (
          0 => '',
          1 => 6,
          2 => ' * This program is free software; you can redistribute it and/or
',
        ),
        6 => 
        array (
          0 => '',
          1 => 7,
          2 => ' * modify it under the terms of the GNU General Public License as
',
        ),
        7 => 
        array (
          0 => '',
          1 => 8,
          2 => ' * published by the Free Software Foundation; version 2 of
',
        ),
        8 => 
        array (
          0 => '',
          1 => 9,
          2 => ' * the License.
',
        ),
        9 => 
        array (
          0 => '',
          1 => 10,
          2 => ' *
',
        ),
        10 => 
        array (
          0 => '',
          1 => 11,
          2 => ' * This program is distributed in the hope that it will be useful,
',
        ),
        11 => 
        array (
          0 => '',
          1 => 12,
          2 => ' * but WITHOUT ANY WARRANTY; without even the implied warranty of
',
        ),
        12 => 
        array (
          0 => '',
          1 => 13,
          2 => ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
',
        ),
        13 => 
        array (
          0 => '',
          1 => 14,
          2 => ' * GNU General Public License for more details.
',
        ),
        14 => 
        array (
          0 => '',
          1 => 15,
          2 => ' *
',
        ),
        15 => 
        array (
          0 => '',
          1 => 16,
          2 => ' * You should have received a copy of the GNU General Public License
',
        ),
        16 => 
        array (
          0 => '',
          1 => 17,
          2 => ' * along with this program; if not, write to the Free Software
',
        ),
        17 => 
        array (
          0 => '',
          1 => 18,
          2 => ' * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
',
        ),
        18 => 
        array (
          0 => '',
          1 => 19,
          2 => ' * MA 02110-1301 USA
',
        ),
        19 => 
        array (
          0 => '',
          1 => 20,
          2 => ' */
',
        ),
        20 => 
        array (
          0 => '',
          1 => 21,
          2 => '
',
        ),
        21 => 
        array (
          0 => '',
          1 => 22,
          2 => 'Field(ERAM, ByteAcc, NoLock, Preserve)
',
        ),
        22 => 
        array (
          0 => '',
          1 => 23,
          2 => '{
',
        ),
        23 => 
        array (
          0 => '',
          1 => 24,
          2 => '		Offset (0x46),
',
        ),
        24 => 
        array (
          0 => '',
          1 => 25,
          2 => '				, 2,
',
        ),
        25 => 
        array (
          0 => '',
          1 => 26,
          2 => '			LIDS	, 1
',
        ),
        26 => 
        array (
          0 => '',
          1 => 27,
          2 => '}
',
        ),
        27 => 
        array (
          0 => '',
          1 => 28,
          2 => '
',
        ),
        28 => 
        array (
          0 => '',
          1 => 29,
          2 => 'Device(LID)
',
        ),
        29 => 
        array (
          0 => '',
          1 => 30,
          2 => '{
',
        ),
        30 => 
        array (
          0 => '',
          1 => 31,
          2 => '	Name(_HID, "PNP0C0D")
',
        ),
        31 => 
        array (
          0 => '',
          1 => 32,
          2 => '
',
        ),
        32 => 
        array (
          0 => '',
          1 => 33,
          2 => '	Method(_LId, 0, NotSerialized)
',
        ),
        33 => 
        array (
          0 => '',
          1 => 34,
          2 => '	{
',
        ),
        34 => 
        array (
          0 => '',
          1 => 35,
          2 => '		return (LIDS)
',
        ),
        35 => 
        array (
          0 => '',
          1 => 36,
          2 => '	}
',
        ),
        36 => 
        array (
          0 => '',
          1 => 37,
          2 => '}
',
        ),
      ),
    ),
    'chunks_def' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '0',
          1 => '0',
        ),
        1 => 
        array (
          0 => '1',
          1 => '37',
        ),
      ),
    ),
  ),
  'src/mainboard/lenovo/x60/acpi/battery.asl' => 
  array (
    'chunks' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '',
          1 => '1',
          2 => '/*
',
        ),
        1 => 
        array (
          0 => '',
          1 => 2,
          2 => ' * This file is part of the coreboot project.
',
        ),
        2 => 
        array (
          0 => '',
          1 => 3,
          2 => ' *
',
        ),
        3 => 
        array (
          0 => '',
          1 => 4,
          2 => ' * Copyright (c) 2011 Sven Schnelle <svens@stackframe.org>
',
        ),
        4 => 
        array (
          0 => '',
          1 => 5,
          2 => ' *
',
        ),
        5 => 
        array (
          0 => '',
          1 => 6,
          2 => ' * This program is free software; you can redistribute it and/or
',
        ),
        6 => 
        array (
          0 => '',
          1 => 7,
          2 => ' * modify it under the terms of the GNU General Public License as
',
        ),
        7 => 
        array (
          0 => '',
          1 => 8,
          2 => ' * published by the Free Software Foundation; version 2 of
',
        ),
        8 => 
        array (
          0 => '',
          1 => 9,
          2 => ' * the License.
',
        ),
        9 => 
        array (
          0 => '',
          1 => 10,
          2 => ' *
',
        ),
        10 => 
        array (
          0 => '',
          1 => 11,
          2 => ' * This program is distributed in the hope that it will be useful,
',
        ),
        11 => 
        array (
          0 => '',
          1 => 12,
          2 => ' * but WITHOUT ANY WARRANTY; without even the implied warranty of
',
        ),
        12 => 
        array (
          0 => '',
          1 => 13,
          2 => ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
',
        ),
        13 => 
        array (
          0 => '',
          1 => 14,
          2 => ' * GNU General Public License for more details.
',
        ),
        14 => 
        array (
          0 => '',
          1 => 15,
          2 => ' *
',
        ),
        15 => 
        array (
          0 => '',
          1 => 16,
          2 => ' * You should have received a copy of the GNU General Public License
',
        ),
        16 => 
        array (
          0 => '',
          1 => 17,
          2 => ' * along with this program; if not, write to the Free Software
',
        ),
        17 => 
        array (
          0 => '',
          1 => 18,
          2 => ' * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
',
        ),
        18 => 
        array (
          0 => '',
          1 => 19,
          2 => ' * MA 02110-1301 USA
',
        ),
        19 => 
        array (
          0 => '',
          1 => 20,
          2 => ' */
',
        ),
        20 => 
        array (
          0 => '',
          1 => 21,
          2 => '
',
        ),
        21 => 
        array (
          0 => '',
          1 => 22,
          2 => 'Field(ERAM, ByteAcc, NoLock, Preserve)
',
        ),
        22 => 
        array (
          0 => '',
          1 => 23,
          2 => '{
',
        ),
        23 => 
        array (
          0 => '',
          1 => 24,
          2 => '	Offset (0x38),
',
        ),
        24 => 
        array (
          0 => '',
          1 => 25,
          2 => '			B0ST, 4,	/* Battery 0 state */
',
        ),
        25 => 
        array (
          0 => '',
          1 => 26,
          2 => '			    , 1,
',
        ),
        26 => 
        array (
          0 => '',
          1 => 27,
          2 => '			B0CH, 1,	/* Battery 0 charging */
',
        ),
        27 => 
        array (
          0 => '',
          1 => 28,
          2 => '			B0DI, 1,	/* Battery 0 discharging */
',
        ),
        28 => 
        array (
          0 => '',
          1 => 29,
          2 => '			B0PR, 1,	/* Battery 0 present */
',
        ),
        29 => 
        array (
          0 => '',
          1 => 30,
          2 => '	Offset (0x39),
',
        ),
        30 => 
        array (
          0 => '',
          1 => 31,
          2 => '			B1ST, 4,	/* Battery 1 state */
',
        ),
        31 => 
        array (
          0 => '',
          1 => 32,
          2 => '			    , 1,
',
        ),
        32 => 
        array (
          0 => '',
          1 => 33,
          2 => '			B1CH, 1,	/* Battery 1 charging, */
',
        ),
        33 => 
        array (
          0 => '',
          1 => 34,
          2 => '			B1DI, 1,        /* Battery 1 discharging,*/
',
        ),
        34 => 
        array (
          0 => '',
          1 => 35,
          2 => '			B1PR, 1		/* Battery 1 present */
',
        ),
        35 => 
        array (
          0 => '',
          1 => 36,
          2 => '}
',
        ),
        36 => 
        array (
          0 => '',
          1 => 37,
          2 => '
',
        ),
        37 => 
        array (
          0 => '',
          1 => 38,
          2 => '/* EC Registers */
',
        ),
        38 => 
        array (
          0 => '',
          1 => 39,
          2 => '/* PAGE == 0x00 */
',
        ),
        39 => 
        array (
          0 => '',
          1 => 40,
          2 => 'Field (ERAM, ByteAcc, NoLock, Preserve)
',
        ),
        40 => 
        array (
          0 => '',
          1 => 41,
          2 => '{
',
        ),
        41 => 
        array (
          0 => '',
          1 => 42,
          2 => '	Offset(0xa0),
',
        ),
        42 => 
        array (
          0 => '',
          1 => 43,
          2 => '			BARC, 16,		/* Battery remaining capacity */
',
        ),
        43 => 
        array (
          0 => '',
          1 => 44,
          2 => '			BAFC, 16,		/* Battery full charge capacity */
',
        ),
        44 => 
        array (
          0 => '',
          1 => 45,
          2 => '	Offset(0xa8),
',
        ),
        45 => 
        array (
          0 => '',
          1 => 46,
          2 => '			BAPR, 16,		/* Battery present rate */
',
        ),
        46 => 
        array (
          0 => '',
          1 => 47,
          2 => '			BAVO, 16,		/* Battery Voltage */
',
        ),
        47 => 
        array (
          0 => '',
          1 => 48,
          2 => '}
',
        ),
        48 => 
        array (
          0 => '',
          1 => 49,
          2 => '
',
        ),
        49 => 
        array (
          0 => '',
          1 => 50,
          2 => '/* PAGE == 0x01 */
',
        ),
        50 => 
        array (
          0 => '',
          1 => 51,
          2 => 'Field (ERAM, ByteAcc, NoLock, Preserve)
',
        ),
        51 => 
        array (
          0 => '',
          1 => 52,
          2 => '{
',
        ),
        52 => 
        array (
          0 => '',
          1 => 53,
          2 => '	Offset(0xa0),
',
        ),
        53 => 
        array (
          0 => '',
          1 => 54,
          2 => '			    , 15,
',
        ),
        54 => 
        array (
          0 => '',
          1 => 55,
          2 => '			BAMA,  1,
',
        ),
        55 => 
        array (
          0 => '',
          1 => 56,
          2 => '}
',
        ),
        56 => 
        array (
          0 => '',
          1 => 57,
          2 => '
',
        ),
        57 => 
        array (
          0 => '',
          1 => 58,
          2 => '/* PAGE == 0x02 */
',
        ),
        58 => 
        array (
          0 => '',
          1 => 59,
          2 => 'Field (ERAM, ByteAcc, NoLock, Preserve)
',
        ),
        59 => 
        array (
          0 => '',
          1 => 60,
          2 => '{
',
        ),
        60 => 
        array (
          0 => '',
          1 => 61,
          2 => '	Offset(0xa0),
',
        ),
        61 => 
        array (
          0 => '',
          1 => 62,
          2 => '			BADC, 16,		/* Design Capacity */
',
        ),
        62 => 
        array (
          0 => '',
          1 => 63,
          2 => '			BADV, 16,		/* Design voltage */
',
        ),
        63 => 
        array (
          0 => '',
          1 => 64,
          2 => '			    , 16,
',
        ),
        64 => 
        array (
          0 => '',
          1 => 65,
          2 => '			    , 16,
',
        ),
        65 => 
        array (
          0 => '',
          1 => 66,
          2 => '			    , 16,
',
        ),
        66 => 
        array (
          0 => '',
          1 => 67,
          2 => '			BASN, 16,
',
        ),
        67 => 
        array (
          0 => '',
          1 => 68,
          2 => '}
',
        ),
        68 => 
        array (
          0 => '',
          1 => 69,
          2 => '
',
        ),
        69 => 
        array (
          0 => '',
          1 => 70,
          2 => '/* PAGE == 0x04: Battery type */
',
        ),
        70 => 
        array (
          0 => '',
          1 => 71,
          2 => 'Field (ERAM, ByteAcc, NoLock, Preserve)
',
        ),
        71 => 
        array (
          0 => '',
          1 => 72,
          2 => '{
',
        ),
        72 => 
        array (
          0 => '',
          1 => 73,
          2 => '	Offset(0xa0),
',
        ),
        73 => 
        array (
          0 => '',
          1 => 74,
          2 => '			BATY, 32
',
        ),
        74 => 
        array (
          0 => '',
          1 => 75,
          2 => '}
',
        ),
        75 => 
        array (
          0 => '',
          1 => 76,
          2 => '
',
        ),
        76 => 
        array (
          0 => '',
          1 => 77,
          2 => '
',
        ),
        77 => 
        array (
          0 => '',
          1 => 78,
          2 => '/* PAGE == 0x05: Battery OEM information */
',
        ),
        78 => 
        array (
          0 => '',
          1 => 79,
          2 => 'Field (ERAM, ByteAcc, NoLock, Preserve)
',
        ),
        79 => 
        array (
          0 => '',
          1 => 80,
          2 => '{
',
        ),
        80 => 
        array (
          0 => '',
          1 => 81,
          2 => '	Offset(0xa0),
',
        ),
        81 => 
        array (
          0 => '',
          1 => 82,
          2 => '			BAOE, 128
',
        ),
        82 => 
        array (
          0 => '',
          1 => 83,
          2 => '}
',
        ),
        83 => 
        array (
          0 => '',
          1 => 84,
          2 => '
',
        ),
        84 => 
        array (
          0 => '',
          1 => 85,
          2 => '/* PAGE == 0x06: Battery name */
',
        ),
        85 => 
        array (
          0 => '',
          1 => 86,
          2 => 'Field (ERAM, ByteAcc, NoLock, Preserve)
',
        ),
        86 => 
        array (
          0 => '',
          1 => 87,
          2 => '{
',
        ),
        87 => 
        array (
          0 => '',
          1 => 88,
          2 => '	Offset(0xa0),
',
        ),
        88 => 
        array (
          0 => '',
          1 => 89,
          2 => '			BANA, 128
',
        ),
        89 => 
        array (
          0 => '',
          1 => 90,
          2 => '}
',
        ),
        90 => 
        array (
          0 => '',
          1 => 91,
          2 => '
',
        ),
        91 => 
        array (
          0 => '',
          1 => 92,
          2 => '/* Arg0: Battery
',
        ),
        92 => 
        array (
          0 => '',
          1 => 93,
          2 => ' * Arg1: Battery Status Package
',
        ),
        93 => 
        array (
          0 => '',
          1 => 94,
          2 => ' * Arg2: charging
',
        ),
        94 => 
        array (
          0 => '',
          1 => 95,
          2 => ' * Arg3: discharging
',
        ),
        95 => 
        array (
          0 => '',
          1 => 96,
          2 => ' */
',
        ),
        96 => 
        array (
          0 => '',
          1 => 97,
          2 => 'Method(BSTA, 4, NotSerialized)
',
        ),
        97 => 
        array (
          0 => '',
          1 => 98,
          2 => '{
',
        ),
        98 => 
        array (
          0 => '',
          1 => 99,
          2 => '	Acquire(ECLK, 0xffff)
',
        ),
        99 => 
        array (
          0 => '',
          1 => 100,
          2 => '	Store(0, Local0)
',
        ),
        100 => 
        array (
          0 => '',
          1 => 101,
          2 => '	Or(1, Arg0, PAGE)
',
        ),
        101 => 
        array (
          0 => '',
          1 => 102,
          2 => '	Store(BAMA, Local1)
',
        ),
        102 => 
        array (
          0 => '',
          1 => 103,
          2 => '	Store(Arg0, PAGE) /* Battery dynamic information */
',
        ),
        103 => 
        array (
          0 => '',
          1 => 104,
          2 => '
',
        ),
        104 => 
        array (
          0 => '',
          1 => 105,
          2 => '	Store(BAPR, Local2)
',
        ),
        105 => 
        array (
          0 => '',
          1 => 106,
          2 => '
',
        ),
        106 => 
        array (
          0 => '',
          1 => 107,
          2 => '	if (Arg2) // charging
',
        ),
        107 => 
        array (
          0 => '',
          1 => 108,
          2 => '	{
',
        ),
        108 => 
        array (
          0 => '',
          1 => 109,
          2 => '		Or(2, Local0, Local0)
',
        ),
        109 => 
        array (
          0 => '',
          1 => 110,
          2 => '
',
        ),
        110 => 
        array (
          0 => '',
          1 => 111,
          2 => '		If (LGreaterEqual (Local2, 0x8000)) {
',
        ),
        111 => 
        array (
          0 => '',
          1 => 112,
          2 => '			Store(0, Local2)
',
        ),
        112 => 
        array (
          0 => '',
          1 => 113,
          2 => '		}
',
        ),
        113 => 
        array (
          0 => '',
          1 => 114,
          2 => '	}
',
        ),
        114 => 
        array (
          0 => '',
          1 => 115,
          2 => '
',
        ),
        115 => 
        array (
          0 => '',
          1 => 116,
          2 => '	if (Arg3) // discharging
',
        ),
        116 => 
        array (
          0 => '',
          1 => 117,
          2 => '	{
',
        ),
        117 => 
        array (
          0 => '',
          1 => 118,
          2 => '		Or(1, Local0, Local0)
',
        ),
        118 => 
        array (
          0 => '',
          1 => 119,
          2 => '		Subtract(0x10000, Local2, Local2)
',
        ),
        119 => 
        array (
          0 => '',
          1 => 120,
          2 => '	}
',
        ),
        120 => 
        array (
          0 => '',
          1 => 121,
          2 => '
',
        ),
        121 => 
        array (
          0 => '',
          1 => 122,
          2 => '	Store(Local0, Index(Arg1, 0x00))
',
        ),
        122 => 
        array (
          0 => '',
          1 => 123,
          2 => '
',
        ),
        123 => 
        array (
          0 => '',
          1 => 124,
          2 => '	if (Local1) {
',
        ),
        124 => 
        array (
          0 => '',
          1 => 125,
          2 => '		Multiply (BARC, 10, Index(Arg1, 2))
',
        ),
        125 => 
        array (
          0 => '',
          1 => 126,
          2 => '		Multiply (Local2, BAVO, Local2)
',
        ),
        126 => 
        array (
          0 => '',
          1 => 127,
          2 => '		Divide (Local2, 1000, Local3, Index(Arg1, 1))
',
        ),
        127 => 
        array (
          0 => '',
          1 => 128,
          2 => '	} else {
',
        ),
        128 => 
        array (
          0 => '',
          1 => 129,
          2 => '		Store(BARC, Index(Arg1, 2))
',
        ),
        129 => 
        array (
          0 => '',
          1 => 130,
          2 => '		Store(Local2, Index(Arg1, 1))
',
        ),
        130 => 
        array (
          0 => '',
          1 => 131,
          2 => '	}
',
        ),
        131 => 
        array (
          0 => '',
          1 => 132,
          2 => '	Store(BAVO, Index(Arg1, 3))
',
        ),
        132 => 
        array (
          0 => '',
          1 => 133,
          2 => '	Release(ECLK)
',
        ),
        133 => 
        array (
          0 => '',
          1 => 134,
          2 => '	Return (Arg1)
',
        ),
        134 => 
        array (
          0 => '',
          1 => 135,
          2 => '}
',
        ),
        135 => 
        array (
          0 => '',
          1 => 136,
          2 => '
',
        ),
        136 => 
        array (
          0 => '',
          1 => 137,
          2 => 'Method(BINF, 2, NotSerialized)
',
        ),
        137 => 
        array (
          0 => '',
          1 => 138,
          2 => '{
',
        ),
        138 => 
        array (
          0 => '',
          1 => 139,
          2 => '	Acquire(ECLK, 0xffff)
',
        ),
        139 => 
        array (
          0 => '',
          1 => 140,
          2 => '	Or(1, Arg1, PAGE) /* Battery 0 static information */
',
        ),
        140 => 
        array (
          0 => '',
          1 => 141,
          2 => '	Xor(BAMA, 1, Index(Arg0, 0))
',
        ),
        141 => 
        array (
          0 => '',
          1 => 142,
          2 => '	Store(BAMA, Local0)
',
        ),
        142 => 
        array (
          0 => '',
          1 => 143,
          2 => '	Store(Arg1, PAGE)
',
        ),
        143 => 
        array (
          0 => '',
          1 => 144,
          2 => '	Store(BAFC, Local2)
',
        ),
        144 => 
        array (
          0 => '',
          1 => 145,
          2 => '	Or(2, Arg1, PAGE)
',
        ),
        145 => 
        array (
          0 => '',
          1 => 146,
          2 => '	Store(BADC, Local1)
',
        ),
        146 => 
        array (
          0 => '',
          1 => 147,
          2 => '
',
        ),
        147 => 
        array (
          0 => '',
          1 => 148,
          2 => '	if (Local0)
',
        ),
        148 => 
        array (
          0 => '',
          1 => 149,
          2 => '	{
',
        ),
        149 => 
        array (
          0 => '',
          1 => 150,
          2 => '		Multiply (Local1, 10, Local1)
',
        ),
        150 => 
        array (
          0 => '',
          1 => 151,
          2 => '		Multiply (Local2, 10, Local2)
',
        ),
        151 => 
        array (
          0 => '',
          1 => 152,
          2 => '	}
',
        ),
        152 => 
        array (
          0 => '',
          1 => 153,
          2 => '
',
        ),
        153 => 
        array (
          0 => '',
          1 => 154,
          2 => '	Store(Local1, Index(Arg0, 1))	// Design Capacity
',
        ),
        154 => 
        array (
          0 => '',
          1 => 155,
          2 => '	Store(Local2, Index(Arg0, 2))	// Last full charge capacity
',
        ),
        155 => 
        array (
          0 => '',
          1 => 156,
          2 => '	Store(BADV, Index(Arg0, 4))	// Design Voltage
',
        ),
        156 => 
        array (
          0 => '',
          1 => 157,
          2 => '	Divide (Local2, 20, Local0, Index(Arg0, 5)) // Warning capacity
',
        ),
        157 => 
        array (
          0 => '',
          1 => 158,
          2 => '
',
        ),
        158 => 
        array (
          0 => '',
          1 => 159,
          2 => '	Store (BASN, Local0)
',
        ),
        159 => 
        array (
          0 => '',
          1 => 160,
          2 => '	Name (SERN, Buffer (0x06) { "     " })
',
        ),
        160 => 
        array (
          0 => '',
          1 => 161,
          2 => '	Store (4, Local1)
',
        ),
        161 => 
        array (
          0 => '',
          1 => 162,
          2 => '	While (Local0)
',
        ),
        162 => 
        array (
          0 => '',
          1 => 163,
          2 => '	{
',
        ),
        163 => 
        array (
          0 => '',
          1 => 164,
          2 => '		Divide (Local0, 0x0A, Local2, Local0)
',
        ),
        164 => 
        array (
          0 => '',
          1 => 165,
          2 => '		Add (Local2, 48, Index (SERN, Local1))
',
        ),
        165 => 
        array (
          0 => '',
          1 => 166,
          2 => '		Decrement (Local1)
',
        ),
        166 => 
        array (
          0 => '',
          1 => 167,
          2 => '	}
',
        ),
        167 => 
        array (
          0 => '',
          1 => 168,
          2 => '	Store (SERN, Index (Arg0, 10)) // Serial Number
',
        ),
        168 => 
        array (
          0 => '',
          1 => 169,
          2 => '
',
        ),
        169 => 
        array (
          0 => '',
          1 => 170,
          2 => '	Or(4, Arg1, PAGE)
',
        ),
        170 => 
        array (
          0 => '',
          1 => 171,
          2 => '	Name (TYPE, Buffer() { 0, 0, 0, 0, 0 })
',
        ),
        171 => 
        array (
          0 => '',
          1 => 172,
          2 => '	Store(BATY, TYPE)
',
        ),
        172 => 
        array (
          0 => '',
          1 => 173,
          2 => '	Store(TYPE, Index (Arg0, 11)) // Battery type
',
        ),
        173 => 
        array (
          0 => '',
          1 => 174,
          2 => '	Or(5, Arg1, PAGE)
',
        ),
        174 => 
        array (
          0 => '',
          1 => 175,
          2 => '	Store(BAOE, Index (Arg0, 12)) // OEM information
',
        ),
        175 => 
        array (
          0 => '',
          1 => 176,
          2 => '	Or(6, Arg1, PAGE)
',
        ),
        176 => 
        array (
          0 => '',
          1 => 177,
          2 => '	Store(BANA, Index (Arg0, 9))  // Model number
',
        ),
        177 => 
        array (
          0 => '',
          1 => 178,
          2 => '	Release(ECLK)
',
        ),
        178 => 
        array (
          0 => '',
          1 => 179,
          2 => '	Return (Arg0)
',
        ),
        179 => 
        array (
          0 => '',
          1 => 180,
          2 => '}
',
        ),
        180 => 
        array (
          0 => '',
          1 => 181,
          2 => '
',
        ),
        181 => 
        array (
          0 => '',
          1 => 182,
          2 => 'Device (BAT0)
',
        ),
        182 => 
        array (
          0 => '',
          1 => 183,
          2 => '{
',
        ),
        183 => 
        array (
          0 => '',
          1 => 184,
          2 => '	Name (_HID, EisaId ("PNP0C0A"))
',
        ),
        184 => 
        array (
          0 => '',
          1 => 185,
          2 => '	Name (_UID, 0x00)
',
        ),
        185 => 
        array (
          0 => '',
          1 => 186,
          2 => '	Name (_PCL, Package () { \\_SB })
',
        ),
        186 => 
        array (
          0 => '',
          1 => 187,
          2 => '
',
        ),
        187 => 
        array (
          0 => '',
          1 => 188,
          2 => '	Name (BATS, Package ()
',
        ),
        188 => 
        array (
          0 => '',
          1 => 189,
          2 => '	{
',
        ),
        189 => 
        array (
          0 => '',
          1 => 190,
          2 => '		0x00,			// 0: PowerUnit: Report in mWh
',
        ),
        190 => 
        array (
          0 => '',
          1 => 191,
          2 => '		0xFFFFFFFF,		// 1: Design cap
',
        ),
        191 => 
        array (
          0 => '',
          1 => 192,
          2 => '		0xFFFFFFFF,		// 2: Last full charge cap
',
        ),
        192 => 
        array (
          0 => '',
          1 => 193,
          2 => '		0x01,			// 3: Battery Technology
',
        ),
        193 => 
        array (
          0 => '',
          1 => 194,
          2 => '		10800,			// 4: Design Voltage (mV)
',
        ),
        194 => 
        array (
          0 => '',
          1 => 195,
          2 => '		0x00,			// 5: Warning design capacity
',
        ),
        195 => 
        array (
          0 => '',
          1 => 196,
          2 => '		200,			// 6: Low design capacity
',
        ),
        196 => 
        array (
          0 => '',
          1 => 197,
          2 => '		1,			// 7: granularity1
',
        ),
        197 => 
        array (
          0 => '',
          1 => 198,
          2 => '		1,			// 8: granularity2
',
        ),
        198 => 
        array (
          0 => '',
          1 => 199,
          2 => '		"",			// 9: Model number
',
        ),
        199 => 
        array (
          0 => '',
          1 => 200,
          2 => '		"",			// A: Serial number
',
        ),
        200 => 
        array (
          0 => '',
          1 => 201,
          2 => '		"",			// B: Battery Type
',
        ),
        201 => 
        array (
          0 => '',
          1 => 202,
          2 => '		""			// C: OEM information
',
        ),
        202 => 
        array (
          0 => '',
          1 => 203,
          2 => '	})
',
        ),
        203 => 
        array (
          0 => '',
          1 => 204,
          2 => '
',
        ),
        204 => 
        array (
          0 => '',
          1 => 205,
          2 => '	Method (_BIF, 0, NotSerialized)
',
        ),
        205 => 
        array (
          0 => '',
          1 => 206,
          2 => '	{
',
        ),
        206 => 
        array (
          0 => '',
          1 => 207,
          2 => '		Return (BINF(BATS, 0))
',
        ),
        207 => 
        array (
          0 => '',
          1 => 208,
          2 => '	}
',
        ),
        208 => 
        array (
          0 => '',
          1 => 209,
          2 => '
',
        ),
        209 => 
        array (
          0 => '',
          1 => 210,
          2 => '	Name (BATI, Package ()
',
        ),
        210 => 
        array (
          0 => '',
          1 => 211,
          2 => '	{
',
        ),
        211 => 
        array (
          0 => '',
          1 => 212,
          2 => '		0,			// Battery State
',
        ),
        212 => 
        array (
          0 => '',
          1 => 213,
          2 => '					// Bit 0 - discharge
',
        ),
        213 => 
        array (
          0 => '',
          1 => 214,
          2 => '					// Bit 1 - charge
',
        ),
        214 => 
        array (
          0 => '',
          1 => 215,
          2 => '					// Bit 2 - critical state
',
        ),
        215 => 
        array (
          0 => '',
          1 => 216,
          2 => '		0,			// Battery present Rate
',
        ),
        216 => 
        array (
          0 => '',
          1 => 217,
          2 => '		0,			// Battery remaining capacity
',
        ),
        217 => 
        array (
          0 => '',
          1 => 218,
          2 => '		0			// Battery present voltage
',
        ),
        218 => 
        array (
          0 => '',
          1 => 219,
          2 => '	})
',
        ),
        219 => 
        array (
          0 => '',
          1 => 220,
          2 => '
',
        ),
        220 => 
        array (
          0 => '',
          1 => 221,
          2 => '	Method (_BST, 0, NotSerialized)
',
        ),
        221 => 
        array (
          0 => '',
          1 => 222,
          2 => '	{
',
        ),
        222 => 
        array (
          0 => '',
          1 => 223,
          2 => '		if (B0PR) {
',
        ),
        223 => 
        array (
          0 => '',
          1 => 224,
          2 => '			Return (BSTA(0, BATI, B0CH, B0DI))
',
        ),
        224 => 
        array (
          0 => '',
          1 => 225,
          2 => '		} else {
',
        ),
        225 => 
        array (
          0 => '',
          1 => 226,
          2 => '			Return (BATS)
',
        ),
        226 => 
        array (
          0 => '',
          1 => 227,
          2 => '		}
',
        ),
        227 => 
        array (
          0 => '',
          1 => 228,
          2 => '	}
',
        ),
        228 => 
        array (
          0 => '',
          1 => 229,
          2 => '
',
        ),
        229 => 
        array (
          0 => '',
          1 => 230,
          2 => '	Method (_STA, 0, NotSerialized)
',
        ),
        230 => 
        array (
          0 => '',
          1 => 231,
          2 => '	{
',
        ),
        231 => 
        array (
          0 => '',
          1 => 232,
          2 => '		if (B0PR) {
',
        ),
        232 => 
        array (
          0 => '',
          1 => 233,
          2 => '			Return (0x1f)
',
        ),
        233 => 
        array (
          0 => '',
          1 => 234,
          2 => '		} else {
',
        ),
        234 => 
        array (
          0 => '',
          1 => 235,
          2 => '			Return (0x0f)
',
        ),
        235 => 
        array (
          0 => '',
          1 => 236,
          2 => '		}
',
        ),
        236 => 
        array (
          0 => '',
          1 => 237,
          2 => '	}
',
        ),
        237 => 
        array (
          0 => '',
          1 => 238,
          2 => '}
',
        ),
        238 => 
        array (
          0 => '',
          1 => 239,
          2 => '
',
        ),
        239 => 
        array (
          0 => '',
          1 => 240,
          2 => 'Device (BAT1)
',
        ),
        240 => 
        array (
          0 => '',
          1 => 241,
          2 => '{
',
        ),
        241 => 
        array (
          0 => '',
          1 => 242,
          2 => '	Name (_HID, EisaId ("PNP0C0A"))
',
        ),
        242 => 
        array (
          0 => '',
          1 => 243,
          2 => '	Name (_UID, 0x00)
',
        ),
        243 => 
        array (
          0 => '',
          1 => 244,
          2 => '	Name (_PCL, Package () { \\_SB })
',
        ),
        244 => 
        array (
          0 => '',
          1 => 245,
          2 => '
',
        ),
        245 => 
        array (
          0 => '',
          1 => 246,
          2 => '	Name (BATS, Package ()
',
        ),
        246 => 
        array (
          0 => '',
          1 => 247,
          2 => '	{
',
        ),
        247 => 
        array (
          0 => '',
          1 => 248,
          2 => '		0x00,			// 0: PowerUnit: Report in mWh
',
        ),
        248 => 
        array (
          0 => '',
          1 => 249,
          2 => '		0xFFFFFFFF,		// 1: Design cap
',
        ),
        249 => 
        array (
          0 => '',
          1 => 250,
          2 => '		0xFFFFFFFF,		// 2: Last full charge cap
',
        ),
        250 => 
        array (
          0 => '',
          1 => 251,
          2 => '		0x01,			// 3: Battery Technology
',
        ),
        251 => 
        array (
          0 => '',
          1 => 252,
          2 => '		10800,			// 4: Design Voltage (mV)
',
        ),
        252 => 
        array (
          0 => '',
          1 => 253,
          2 => '		0x00,			// 5: Warning design capacity
',
        ),
        253 => 
        array (
          0 => '',
          1 => 254,
          2 => '		200,			// 6: Low design capacity
',
        ),
        254 => 
        array (
          0 => '',
          1 => 255,
          2 => '		1,			// 7: granularity1
',
        ),
        255 => 
        array (
          0 => '',
          1 => 256,
          2 => '		1,			// 8: granularity2
',
        ),
        256 => 
        array (
          0 => '',
          1 => 257,
          2 => '		"",			// 9: Model number
',
        ),
        257 => 
        array (
          0 => '',
          1 => 258,
          2 => '		"",			// A: Serial number
',
        ),
        258 => 
        array (
          0 => '',
          1 => 259,
          2 => '		"",			// B: Battery Type
',
        ),
        259 => 
        array (
          0 => '',
          1 => 260,
          2 => '		""			// C: OEM information
',
        ),
        260 => 
        array (
          0 => '',
          1 => 261,
          2 => '	})
',
        ),
        261 => 
        array (
          0 => '',
          1 => 262,
          2 => '
',
        ),
        262 => 
        array (
          0 => '',
          1 => 263,
          2 => '	Method (_BIF, 0, NotSerialized)
',
        ),
        263 => 
        array (
          0 => '',
          1 => 264,
          2 => '	{
',
        ),
        264 => 
        array (
          0 => '',
          1 => 265,
          2 => '		Return (BINF(BATS, 0x10))
',
        ),
        265 => 
        array (
          0 => '',
          1 => 266,
          2 => '	}
',
        ),
        266 => 
        array (
          0 => '',
          1 => 267,
          2 => '
',
        ),
        267 => 
        array (
          0 => '',
          1 => 268,
          2 => '	Name (BATI, Package ()
',
        ),
        268 => 
        array (
          0 => '',
          1 => 269,
          2 => '	{
',
        ),
        269 => 
        array (
          0 => '',
          1 => 270,
          2 => '		0,			// Battery State
',
        ),
        270 => 
        array (
          0 => '',
          1 => 271,
          2 => '					// Bit 0 - discharge
',
        ),
        271 => 
        array (
          0 => '',
          1 => 272,
          2 => '					// Bit 1 - charge
',
        ),
        272 => 
        array (
          0 => '',
          1 => 273,
          2 => '					// Bit 2 - critical state
',
        ),
        273 => 
        array (
          0 => '',
          1 => 274,
          2 => '		0,			// Battery present Rate
',
        ),
        274 => 
        array (
          0 => '',
          1 => 275,
          2 => '		0,			// Battery remaining capacity
',
        ),
        275 => 
        array (
          0 => '',
          1 => 276,
          2 => '		0			// Battery present voltage
',
        ),
        276 => 
        array (
          0 => '',
          1 => 277,
          2 => '	})
',
        ),
        277 => 
        array (
          0 => '',
          1 => 278,
          2 => '
',
        ),
        278 => 
        array (
          0 => '',
          1 => 279,
          2 => '	Method (_BST, 0, NotSerialized)
',
        ),
        279 => 
        array (
          0 => '',
          1 => 280,
          2 => '	{
',
        ),
        280 => 
        array (
          0 => '',
          1 => 281,
          2 => '		if (B1PR) {
',
        ),
        281 => 
        array (
          0 => '',
          1 => 282,
          2 => '			Return (BSTA(0x10, BATI, B1CH, B1DI))
',
        ),
        282 => 
        array (
          0 => '',
          1 => 283,
          2 => '		} else {
',
        ),
        283 => 
        array (
          0 => '',
          1 => 284,
          2 => '			Return (BATS)
',
        ),
        284 => 
        array (
          0 => '',
          1 => 285,
          2 => '		}
',
        ),
        285 => 
        array (
          0 => '',
          1 => 286,
          2 => '	}
',
        ),
        286 => 
        array (
          0 => '',
          1 => 287,
          2 => '
',
        ),
        287 => 
        array (
          0 => '',
          1 => 288,
          2 => '	Method (_STA, 0, NotSerialized)
',
        ),
        288 => 
        array (
          0 => '',
          1 => 289,
          2 => '	{
',
        ),
        289 => 
        array (
          0 => '',
          1 => 290,
          2 => '		if (B1PR) {
',
        ),
        290 => 
        array (
          0 => '',
          1 => 291,
          2 => '			Return (0x1f)
',
        ),
        291 => 
        array (
          0 => '',
          1 => 292,
          2 => '		} else {
',
        ),
        292 => 
        array (
          0 => '',
          1 => 293,
          2 => '			Return (0x0f)
',
        ),
        293 => 
        array (
          0 => '',
          1 => 294,
          2 => '		}
',
        ),
        294 => 
        array (
          0 => '',
          1 => 295,
          2 => '	}
',
        ),
        295 => 
        array (
          0 => '',
          1 => 296,
          2 => '}
',
        ),
      ),
    ),
    'chunks_def' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '0',
          1 => '0',
        ),
        1 => 
        array (
          0 => '1',
          1 => '296',
        ),
      ),
    ),
  ),
  'src/mainboard/lenovo/x60/acpi/beep.asl' => 
  array (
    'chunks' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '',
          1 => '1',
          2 => '/*
',
        ),
        1 => 
        array (
          0 => '',
          1 => 2,
          2 => ' * This file is part of the coreboot project.
',
        ),
        2 => 
        array (
          0 => '',
          1 => 3,
          2 => ' *
',
        ),
        3 => 
        array (
          0 => '',
          1 => 4,
          2 => ' * Copyright (c) 2011 Sven Schnelle <svens@stackframe.org>
',
        ),
        4 => 
        array (
          0 => '',
          1 => 5,
          2 => ' *
',
        ),
        5 => 
        array (
          0 => '',
          1 => 6,
          2 => ' * This program is free software; you can redistribute it and/or
',
        ),
        6 => 
        array (
          0 => '',
          1 => 7,
          2 => ' * modify it under the terms of the GNU General Public License as
',
        ),
        7 => 
        array (
          0 => '',
          1 => 8,
          2 => ' * published by the Free Software Foundation; version 2 of
',
        ),
        8 => 
        array (
          0 => '',
          1 => 9,
          2 => ' * the License.
',
        ),
        9 => 
        array (
          0 => '',
          1 => 10,
          2 => ' *
',
        ),
        10 => 
        array (
          0 => '',
          1 => 11,
          2 => ' * This program is distributed in the hope that it will be useful,
',
        ),
        11 => 
        array (
          0 => '',
          1 => 12,
          2 => ' * but WITHOUT ANY WARRANTY; without even the implied warranty of
',
        ),
        12 => 
        array (
          0 => '',
          1 => 13,
          2 => ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
',
        ),
        13 => 
        array (
          0 => '',
          1 => 14,
          2 => ' * GNU General Public License for more details.
',
        ),
        14 => 
        array (
          0 => '',
          1 => 15,
          2 => ' *
',
        ),
        15 => 
        array (
          0 => '',
          1 => 16,
          2 => ' * You should have received a copy of the GNU General Public License
',
        ),
        16 => 
        array (
          0 => '',
          1 => 17,
          2 => ' * along with this program; if not, write to the Free Software
',
        ),
        17 => 
        array (
          0 => '',
          1 => 18,
          2 => ' * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
',
        ),
        18 => 
        array (
          0 => '',
          1 => 19,
          2 => ' * MA 02110-1301 USA
',
        ),
        19 => 
        array (
          0 => '',
          1 => 20,
          2 => ' */
',
        ),
        20 => 
        array (
          0 => '',
          1 => 21,
          2 => '
',
        ),
        21 => 
        array (
          0 => '',
          1 => 22,
          2 => 'Field(ERAM, ByteAcc, NoLock, Preserve)
',
        ),
        22 => 
        array (
          0 => '',
          1 => 23,
          2 => '{
',
        ),
        23 => 
        array (
          0 => '',
          1 => 24,
          2 => '		Offset (0x06),
',
        ),
        24 => 
        array (
          0 => '',
          1 => 25,
          2 => '			SNDS, 8		/* Write to this register to generate sound */
',
        ),
        25 => 
        array (
          0 => '',
          1 => 26,
          2 => '
',
        ),
        26 => 
        array (
          0 => '',
          1 => 27,
          2 => '}
',
        ),
        27 => 
        array (
          0 => '',
          1 => 28,
          2 => '
',
        ),
        28 => 
        array (
          0 => '',
          1 => 29,
          2 => 'Method(BEEP, 1, NotSerialized)
',
        ),
        29 => 
        array (
          0 => '',
          1 => 30,
          2 => '{
',
        ),
        30 => 
        array (
          0 => '',
          1 => 31,
          2 => '	Store (Arg0, SNDS)
',
        ),
        31 => 
        array (
          0 => '',
          1 => 32,
          2 => '}
',
        ),
      ),
    ),
    'chunks_def' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '0',
          1 => '0',
        ),
        1 => 
        array (
          0 => '1',
          1 => '32',
        ),
      ),
    ),
  ),
  'src/mainboard/lenovo/x60/dsdt.asl' => 
  array (
    'chunks' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '',
          1 => '1',
          2 => '/*
',
        ),
        1 => 
        array (
          0 => '',
          1 => 2,
          2 => ' * This file is part of the coreboot project.
',
        ),
        2 => 
        array (
          0 => '',
          1 => 3,
          2 => ' *
',
        ),
        3 => 
        array (
          0 => '',
          1 => 4,
          2 => ' * Copyright (C) 2007-2009 coresystems GmbH
',
        ),
        4 => 
        array (
          0 => '',
          1 => 5,
          2 => ' *
',
        ),
        5 => 
        array (
          0 => '',
          1 => 6,
          2 => ' * This program is free software; you can redistribute it and/or
',
        ),
        6 => 
        array (
          0 => '',
          1 => 7,
          2 => ' * modify it under the terms of the GNU General Public License as
',
        ),
        7 => 
        array (
          0 => '',
          1 => 8,
          2 => ' * published by the Free Software Foundation; version 2 of
',
        ),
        8 => 
        array (
          0 => '',
          1 => 9,
          2 => ' * the License.
',
        ),
        9 => 
        array (
          0 => '',
          1 => 10,
          2 => ' *
',
        ),
        10 => 
        array (
          0 => '',
          1 => 11,
          2 => ' * This program is distributed in the hope that it will be useful,
',
        ),
        11 => 
        array (
          0 => '',
          1 => 12,
          2 => ' * but WITHOUT ANY WARRANTY; without even the implied warranty of
',
        ),
        12 => 
        array (
          0 => '',
          1 => 13,
          2 => ' * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
',
        ),
        13 => 
        array (
          0 => '',
          1 => 14,
          2 => ' * GNU General Public License for more details.
',
        ),
        14 => 
        array (
          0 => '',
          1 => 15,
          2 => ' *
',
        ),
        15 => 
        array (
          0 => '',
          1 => 16,
          2 => ' * You should have received a copy of the GNU General Public License
',
        ),
        16 => 
        array (
          0 => '',
          1 => 17,
          2 => ' * along with this program; if not, write to the Free Software
',
        ),
        17 => 
        array (
          0 => '',
          1 => 18,
          2 => ' * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
',
        ),
        18 => 
        array (
          0 => '',
          1 => 19,
          2 => ' * MA 02110-1301 USA
',
        ),
        19 => 
        array (
          0 => '',
          1 => 20,
          2 => ' */
',
        ),
        20 => 
        array (
          0 => '',
          1 => 21,
          2 => '
',
        ),
        21 => 
        array (
          0 => '',
          1 => 22,
          2 => 'DefinitionBlock(
',
        ),
        22 => 
        array (
          0 => '',
          1 => 23,
          2 => '	"dsdt.aml",
',
        ),
        23 => 
        array (
          0 => '',
          1 => 24,
          2 => '	"DSDT",
',
        ),
        24 => 
        array (
          0 => '',
          1 => 25,
          2 => '	0x03,		// DSDT revision: ACPI v3.0
',
        ),
        25 => 
        array (
          0 => '',
          1 => 26,
          2 => '	"COREv4",	// OEM id
',
        ),
        26 => 
        array (
          0 => '',
          1 => 27,
          2 => '	"COREBOOT",     // OEM table id
',
        ),
        27 => 
        array (
          0 => '',
          1 => 28,
          2 => '	0x20090419	// OEM revision
',
        ),
        28 => 
        array (
          0 => '',
          1 => 29,
          2 => ')
',
        ),
        29 => 
        array (
          0 => '',
          1 => 30,
          2 => '{
',
        ),
        30 => 
        array (
          0 => '',
          1 => 31,
          2 => '	// Some generic macros
',
        ),
        31 => 
        array (
          0 => '',
          1 => 32,
          2 => '	#include "acpi/platform.asl"
',
        ),
        32 => 
        array (
          0 => '',
          1 => 33,
          2 => '
',
        ),
        33 => 
        array (
          0 => '',
          1 => 34,
          2 => '	// global NVS and variables
',
        ),
        34 => 
        array (
          0 => '',
          1 => 35,
          2 => '	#include "../../../southbridge/intel/i82801gx/acpi/globalnvs.asl"
',
        ),
        35 => 
        array (
          0 => '',
          1 => 36,
          2 => '
',
        ),
        36 => 
        array (
          0 => '',
          1 => 37,
          2 => '	// General Purpose Events
',
        ),
        37 => 
        array (
          0 => '',
          1 => 38,
          2 => '	#include "acpi/gpe.asl"
',
        ),
        38 => 
        array (
          0 => '',
          1 => 39,
          2 => '
',
        ),
        39 => 
        array (
          0 => '',
          1 => 40,
          2 => '	// mainboard specific devices
',
        ),
        40 => 
        array (
          0 => '',
          1 => 41,
          2 => '	#include "acpi/mainboard.asl"
',
        ),
        41 => 
        array (
          0 => '',
          1 => 42,
          2 => '
',
        ),
        42 => 
        array (
          0 => '',
          1 => 43,
          2 => '	// Thermal Zone
',
        ),
        43 => 
        array (
          0 => '',
          1 => 44,
          2 => '	#include "acpi/thermal.asl"
',
        ),
        44 => 
        array (
          0 => '',
          1 => 45,
          2 => '
',
        ),
        45 => 
        array (
          0 => '',
          1 => 46,
          2 => '	Scope (\\_SB) {
',
        ),
        46 => 
        array (
          0 => '',
          1 => 47,
          2 => '		Device (PCI0)
',
        ),
        47 => 
        array (
          0 => '',
          1 => 48,
          2 => '		{
',
        ),
        48 => 
        array (
          0 => '',
          1 => 49,
          2 => '			#include "../../../northbridge/intel/i945/acpi/i945.asl"
',
        ),
        49 => 
        array (
          0 => '',
          1 => 50,
          2 => '			#include "../../../southbridge/intel/i82801gx/acpi/ich7.asl"
',
        ),
        50 => 
        array (
          0 => '',
          1 => 51,
          2 => '		}
',
        ),
        51 => 
        array (
          0 => '',
          1 => 52,
          2 => '	}
',
        ),
        52 => 
        array (
          0 => '',
          1 => 53,
          2 => '
',
        ),
        53 => 
        array (
          0 => '',
          1 => 54,
          2 => '	/* Chipset specific sleep states */
',
        ),
        54 => 
        array (
          0 => '',
          1 => 55,
          2 => '	#include "../../../southbridge/intel/i82801gx/acpi/sleepstates.asl"
',
        ),
        55 => 
        array (
          0 => '',
          1 => 56,
          2 => '}
',
        ),
      ),
    ),
    'chunks_def' => 
    array (
      0 => 
      array (
        0 => 
        array (
          0 => '0',
          1 => '0',
        ),
        1 => 
        array (
          0 => '1',
          1 => '56',
        ),
      ),
    ),
  ),
);